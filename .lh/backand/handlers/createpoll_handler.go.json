{
    "sourceFile": "backand/handlers/createpoll_handler.go",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 32,
            "patches": [
                {
                    "date": 1747213500217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747213595670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,33 @@\n-package handlers\n\\ No newline at end of file\n+package handlers\r\n+\r\n+import (\r\n+    \"encoding/json\"\r\n+    \"net/http\"\r\n+    \"quickpoll/services\"\r\n+)\r\n+\r\n+func CreatePollHandler(w http.ResponseWriter, r *http://www.w3.org/1999/xhtml#r) {\r\n+    var input struct {\r\n+        Title       string   `json:\"title\"`\r\n+        Description string   `json:\"description\"`\r\n+        Options     []string `json:\"options\"`\r\n+        ExpiresAt   string   `json:\"expires_at\"`\r\n+    }\r\n+\r\n+    if err := json.NewDecoder(r.Body).Decode(&input); err != nil {\r\n+        http.Error(w, err.Error(), http.StatusBadRequest)\r\n+        return\r\n+    }\r\n+\r\n+    pollID, url, err := services.CreatePoll(input.Title, input.Description, input.Options, input.ExpiresAt)\r\n+    if err != nil {\r\n+        http.Error(w, err.Error(), http.StatusInternalServerError)\r\n+        return\r\n+    }\r\n+\r\n+    w.Header().Set(\"Content-Type\", \"application/json\")\r\n+    json.NewEncoder(w).Encode(map[string]interface{}{\r\n+        \"poll_id\": pollID,\r\n+        \"url\":     url,\r\n+    })\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747213622125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n     \"net/http\"\r\n     \"quickpoll/services\"\r\n )\r\n \r\n-func CreatePollHandler(w http.ResponseWriter, r *http://www.w3.org/1999/xhtml#r) {\r\n+func CreatePollHandler(w http.ResponseWriter, r *) {\r\n     var input struct {\r\n         Title       string   `json:\"title\"`\r\n         Description string   `json:\"description\"`\r\n         Options     []string `json:\"options\"`\r\n"
                },
                {
                    "date": 1747213628942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n     \"net/http\"\r\n     \"quickpoll/services\"\r\n )\r\n \r\n-func CreatePollHandler(w http.ResponseWriter, r *) {\r\n+func CreatePollHandler(w http.ResponseWriter) {\r\n     var input struct {\r\n         Title       string   `json:\"title\"`\r\n         Description string   `json:\"description\"`\r\n         Options     []string `json:\"options\"`\r\n"
                },
                {
                    "date": 1747213637214,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n     \"net/http\"\r\n     \"quickpoll/services\"\r\n )\r\n \r\n-func CreatePollHandler(w http.ResponseWriter) {\r\n+func CreatePollHandler(w http.ResponseWriter, r *http:www.w3.org/1999/xhtml#r) {\r\n     var input struct {\r\n         Title       string   `json:\"title\"`\r\n         Description string   `json:\"description\"`\r\n         Options     []string `json:\"options\"`\r\n"
                },
                {
                    "date": 1747213646768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n     \"net/http\"\r\n     \"quickpoll/services\"\r\n )\r\n \r\n-func CreatePollHandler(w http.ResponseWriter, r *http:www.w3.org/1999/xhtml#r) {\r\n+func CreatePollHandler(w http.ResponseWriter, r *\"http:www.w3.org/1999/xhtml#r) {\r\n     var input struct {\r\n         Title       string   `json:\"title\"`\r\n         Description string   `json:\"description\"`\r\n         Options     []string `json:\"options\"`\r\n"
                },
                {
                    "date": 1747213653454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n     \"net/http\"\r\n     \"quickpoll/services\"\r\n )\r\n \r\n-func CreatePollHandler(w http.ResponseWriter, r *\"http:www.w3.org/1999/xhtml#r) {\r\n+func CreatePollHandler(w http.ResponseWriter, r *http:www.w3.org/1999/xhtml#r) {\r\n     var input struct {\r\n         Title       string   `json:\"title\"`\r\n         Description string   `json:\"description\"`\r\n         Options     []string `json:\"options\"`\r\n"
                },
                {
                    "date": 1747213764791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,32 +2,33 @@\n \r\n import (\r\n     \"encoding/json\"\r\n     \"net/http\"\r\n+\r\n     \"quickpoll/services\"\r\n )\r\n \r\n-func CreatePollHandler(w http.ResponseWriter, r *http:www.w3.org/1999/xhtml#r) {\r\n+func CreatePollHandler(w http.ResponseWriter, r *http.Request) {\r\n     var input struct {\r\n         Title       string   `json:\"title\"`\r\n         Description string   `json:\"description\"`\r\n         Options     []string `json:\"options\"`\r\n         ExpiresAt   string   `json:\"expires_at\"`\r\n     }\r\n \r\n     if err := json.NewDecoder(r.Body).Decode(&input); err != nil {\r\n-        http.Error(w, err.Error(), http.StatusBadRequest)\r\n+        http.Error(w, \"Invalid request payload\", http.StatusBadRequest)\r\n         return\r\n     }\r\n \r\n-    pollID, url, err := services.CreatePoll(input.Title, input.Description, input.Options, input.ExpiresAt)\r\n+    pollID, pollURL, err := services.CreatePoll(input.Title, input.Description, input.Options, input.ExpiresAt)\r\n     if err != nil {\r\n         http.Error(w, err.Error(), http.StatusInternalServerError)\r\n         return\r\n     }\r\n \r\n     w.Header().Set(\"Content-Type\", \"application/json\")\r\n     json.NewEncoder(w).Encode(map[string]interface{}{\r\n         \"poll_id\": pollID,\r\n-        \"url\":     url,\r\n+        \"url\":     pollURL,\r\n     })\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747213772364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import (\r\n     \"encoding/json\"\r\n     \"net/http\"\r\n \r\n-    \"quickpoll/services\"\r\n+    \"backand/services\"\r\n )\r\n \r\n func CreatePollHandler(w http.ResponseWriter, r *http.Request) {\r\n     var input struct {\r\n"
                },
                {
                    "date": 1747214199411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n \r\n import (\r\n     \"encoding/json\"\r\n     \"net/http\"\r\n+\t\"github.com/gorilla/mux\"\r\n \r\n     \"backand/services\"\r\n )\r\n \r\n"
                },
                {
                    "date": 1747214315073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,11 +2,10 @@\n \r\n import (\r\n     \"encoding/json\"\r\n     \"net/http\"\r\n-\t\"github.com/gorilla/mux\"\r\n \r\n-    \"backand/services\"\r\n+    \"quickpoll/services\"\r\n )\r\n \r\n func CreatePollHandler(w http.ResponseWriter, r *http.Request) {\r\n     var input struct {\r\n@@ -20,9 +19,14 @@\n         http.Error(w, \"Invalid request payload\", http.StatusBadRequest)\r\n         return\r\n     }\r\n \r\n-    pollID, pollURL, err := services.CreatePoll(input.Title, input.Description, input.Options, input.ExpiresAt)\r\n+    pollID, pollURL, err := services.CreatePoll(\r\n+        input.Title,\r\n+        input.Description,\r\n+        input.ExpiresAt,\r\n+        input.Options, // <- Benar: dikirim sebagai []string\r\n+    )\r\n     if err != nil {\r\n         http.Error(w, err.Error(), http.StatusInternalServerError)\r\n         return\r\n     }\r\n"
                },
                {
                    "date": 1747214322968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import (\r\n     \"encoding/json\"\r\n     \"net/http\"\r\n \r\n-    \"quickpoll/services\"\r\n+    \"backand/services\"\r\n )\r\n \r\n func CreatePollHandler(w http.ResponseWriter, r *http.Request) {\r\n     var input struct {\r\n"
                },
                {
                    "date": 1747220387620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,11 @@\n-package handlers\r\n-\r\n-import (\r\n-    \"encoding/json\"\r\n-    \"net/http\"\r\n-\r\n-    \"backand/services\"\r\n-)\r\n-\r\n func CreatePollHandler(w http.ResponseWriter, r *http.Request) {\r\n     var input struct {\r\n-        Title       string   `json:\"title\"`\r\n-        Description string   `json:\"description\"`\r\n-        Options     []string `json:\"options\"`\r\n-        ExpiresAt   string   `json:\"expires_at\"`\r\n+        Title                string   `json:\"title\"`\r\n+        Description          string   `json:\"description\"`\r\n+        Options              []string `json:\"options\"`\r\n+        ExpiresAt            string   `json:\"expires_at\"`\r\n+        AllowRealtimeResults bool     `json:\"allow_realtime_results\"`\r\n     }\r\n \r\n     if err := json.NewDecoder(r.Body).Decode(&input); err != nil {\r\n         http.Error(w, \"Invalid request payload\", http.StatusBadRequest)\r\n@@ -23,9 +15,10 @@\n     pollID, pollURL, err := services.CreatePoll(\r\n         input.Title,\r\n         input.Description,\r\n         input.ExpiresAt,\r\n-        input.Options, // <- Benar: dikirim sebagai []string\r\n+        input.Options,\r\n+        input.AllowRealtimeResults,\r\n     )\r\n     if err != nil {\r\n         http.Error(w, err.Error(), http.StatusInternalServerError)\r\n         return\r\n"
                },
                {
                    "date": 1747220395340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,19 @@\n+package handlers\r\n+\r\n+import (\r\n+    \"encoding/json\"\r\n+    \"net/http\"\r\n+\r\n+    \"backand/services\"\r\n+)\r\n+\r\n func CreatePollHandler(w http.ResponseWriter, r *http.Request) {\r\n     var input struct {\r\n-        Title                string   `json:\"title\"`\r\n-        Description          string   `json:\"description\"`\r\n-        Options              []string `json:\"options\"`\r\n-        ExpiresAt            string   `json:\"expires_at\"`\r\n-        AllowRealtimeResults bool     `json:\"allow_realtime_results\"`\r\n+        Title       string   `json:\"title\"`\r\n+        Description string   `json:\"description\"`\r\n+        Options     []string `json:\"options\"`\r\n+        ExpiresAt   string   `json:\"expires_at\"`\r\n     }\r\n \r\n     if err := json.NewDecoder(r.Body).Decode(&input); err != nil {\r\n         http.Error(w, \"Invalid request payload\", http.StatusBadRequest)\r\n@@ -15,10 +23,9 @@\n     pollID, pollURL, err := services.CreatePoll(\r\n         input.Title,\r\n         input.Description,\r\n         input.ExpiresAt,\r\n-        input.Options,\r\n-        input.AllowRealtimeResults,\r\n+        input.Options, // <- Benar: dikirim sebagai []string\r\n     )\r\n     if err != nil {\r\n         http.Error(w, err.Error(), http.StatusInternalServerError)\r\n         return\r\n"
                },
                {
                    "date": 1747220405658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,12 +8,13 @@\n )\r\n \r\n func CreatePollHandler(w http.ResponseWriter, r *http.Request) {\r\n     var input struct {\r\n-        Title       string   `json:\"title\"`\r\n-        Description string   `json:\"description\"`\r\n-        Options     []string `json:\"options\"`\r\n-        ExpiresAt   string   `json:\"expires_at\"`\r\n+        Title                string   `json:\"title\"`\r\n+        Description          string   `json:\"description\"`\r\n+        Options              []string `json:\"options\"`\r\n+        ExpiresAt            string   `json:\"expires_at\"`\r\n+        AllowRealtimeResults bool     `json:\"allow_realtime_results\"`\r\n     }\r\n \r\n     if err := json.NewDecoder(r.Body).Decode(&input); err != nil {\r\n         http.Error(w, \"Invalid request payload\", http.StatusBadRequest)\r\n@@ -23,9 +24,10 @@\n     pollID, pollURL, err := services.CreatePoll(\r\n         input.Title,\r\n         input.Description,\r\n         input.ExpiresAt,\r\n-        input.Options, // <- Benar: dikirim sebagai []string\r\n+        input.Options,\r\n+        input.AllowRealtimeResults,\r\n     )\r\n     if err != nil {\r\n         http.Error(w, err.Error(), http.StatusInternalServerError)\r\n         return\r\n"
                },
                {
                    "date": 1747282556317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,10 @@\n     \"backand/services\"\r\n )\r\n \r\n func CreatePollHandler(w http.ResponseWriter, r *http.Request) {\r\n+\r\n+    \r\n     var input struct {\r\n         Title                string   `json:\"title\"`\r\n         Description          string   `json:\"description\"`\r\n         Options              []string `json:\"options\"`\r\n"
                },
                {
                    "date": 1747282563728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,10 +7,10 @@\n     \"backand/services\"\r\n )\r\n \r\n func CreatePollHandler(w http.ResponseWriter, r *http.Request) {\r\n+    var time\r\n \r\n-    \r\n     var input struct {\r\n         Title                string   `json:\"title\"`\r\n         Description          string   `json:\"description\"`\r\n         Options              []string `json:\"options\"`\r\n"
                },
                {
                    "date": 1747282569936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n     \"backand/services\"\r\n )\r\n \r\n func CreatePollHandler(w http.ResponseWriter, r *http.Request) {\r\n-    var time\r\n+    \r\n \r\n     var input struct {\r\n         Title                string   `json:\"title\"`\r\n         Description          string   `json:\"description\"`\r\n"
                },
                {
                    "date": 1747282576160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,12 +4,23 @@\n     \"encoding/json\"\r\n     \"net/http\"\r\n \r\n     \"backand/services\"\r\n+    \"time\"\r\n )\r\n \r\n func CreatePollHandler(w http.ResponseWriter, r *http.Request) {\r\n-    \r\n+    var expiresAt time.Time\r\n+if input.ExpiresAt == \"\" {\r\n+    expiresAt = time.Now().Add(7 * 24 * time.Hour) // Default 7 hari\r\n+} else {\r\n+    var err error\r\n+    expiresAt, err = time.Parse(\"2006-01-02T15:04:05\", input.ExpiresAt)\r\n+    if err != nil {\r\n+        http.Error(w, `{\"error\": \"invalid expiration date\"}`, http.StatusBadRequest)\r\n+        return\r\n+    }\r\n+}\r\n \r\n     var input struct {\r\n         Title                string   `json:\"title\"`\r\n         Description          string   `json:\"description\"`\r\n"
                },
                {
                    "date": 1747282605264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,54 +1,54 @@\n package handlers\r\n \r\n import (\r\n-    \"encoding/json\"\r\n-    \"net/http\"\r\n+\t\"encoding/json\"\r\n+\t\"net/http\"\r\n \r\n-    \"backand/services\"\r\n-    \"time\"\r\n+\t\"backand/services\"\r\n+\t\"time\"\r\n )\r\n \r\n func CreatePollHandler(w http.ResponseWriter, r *http.Request) {\r\n-    var expiresAt time.Time\r\n-if input.ExpiresAt == \"\" {\r\n-    expiresAt = time.Now().Add(7 * 24 * time.Hour) // Default 7 hari\r\n-} else {\r\n-    var err error\r\n-    expiresAt, err = time.Parse(\"2006-01-02T15:04:05\", input.ExpiresAt)\r\n-    if err != nil {\r\n-        http.Error(w, `{\"error\": \"invalid expiration date\"}`, http.StatusBadRequest)\r\n-        return\r\n-    }\r\n-}\r\n+\tvar expiresAt time.Time\r\n+\tif input.ExpiresAt == \"\" {\r\n+\t\texpiresAt = time.Now().Add(7 * 24 * time.Hour) // Default 7 hari\r\n+\t} else {\r\n+\t\tvar err error\r\n+\t\texpiresAt, err = time.Parse(\"2006-01-02T15:04:05\", input.ExpiresAt)\r\n+\t\tif err != nil {\r\n+\t\t\thttp.Error(w, `{\"error\": \"invalid expiration date\"}`, http.StatusBadRequest)\r\n+\t\t\treturn\r\n+\t\t}\r\n+\t}\r\n \r\n-    var input struct {\r\n-        Title                string   `json:\"title\"`\r\n-        Description          string   `json:\"description\"`\r\n-        Options              []string `json:\"options\"`\r\n-        ExpiresAt            string   `json:\"expires_at\"`\r\n-        AllowRealtimeResults bool     `json:\"allow_realtime_results\"`\r\n-    }\r\n+\tvar input struct {\r\n+\t\tTitle                string   `json:\"title\"`\r\n+\t\tDescription          string   `json:\"description\"`\r\n+\t\tOptions              []string `json:\"options\"`\r\n+\t\tExpiresAt            string   `json:\"expires_at\"`\r\n+\t\tAllowRealtimeResults bool     `json:\"allow_realtime_results\"`\r\n+\t}\r\n \r\n-    if err := json.NewDecoder(r.Body).Decode(&input); err != nil {\r\n\\ No newline at end of file\n-        http.Error(w, \"Invalid request payload\", http.StatusBadRequest)\r\n-        return\r\n-    }\r\n+\tif err := json.NewDecoder(r.Body).Decode(&input); err != nil {\r\n+\t\thttp.Error(w, \"Invalid request payload\", http.StatusBadRequest)\r\n+\t\treturn\r\n+\t}\r\n \r\n-    pollID, pollURL, err := services.CreatePoll(\r\n-        input.Title,\r\n-        input.Description,\r\n-        input.ExpiresAt,\r\n-        input.Options,\r\n-        input.AllowRealtimeResults,\r\n-    )\r\n-    if err != nil {\r\n-        http.Error(w, err.Error(), http.StatusInternalServerError)\r\n-        return\r\n-    }\r\n+\tpollID, pollURL, err := services.CreatePoll(\r\n+\t\tinput.Title,\r\n+\t\tinput.Description,\r\n+\t\tinput.ExpiresAt,\r\n+\t\tinput.Options,\r\n+\t\tinput.AllowRealtimeResults,\r\n+\t)\r\n+\tif err != nil {\r\n+\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\r\n+\t\treturn\r\n+\t}\r\n \r\n-    w.Header().Set(\"Content-Type\", \"application/json\")\r\n-    json.NewEncoder(w).Encode(map[string]interface{}{\r\n-        \"poll_id\": pollID,\r\n-        \"url\":     pollURL,\r\n-    })\r\n-}\n+\tw.Header().Set(\"Content-Type\", \"application/json\")\r\n+\tjson.NewEncoder(w).Encode(map[string]interface{}{\r\n+\t\t\"poll_id\": pollID,\r\n+\t\t\"url\":     pollURL,\r\n+\t})\r\n+}\r\n"
                },
                {
                    "date": 1747282611805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n \t\"net/http\"\r\n \r\n \t\"backand/services\"\r\n \t\"time\"\r\n+    \"input\"\r\n )\r\n \r\n func CreatePollHandler(w http.ResponseWriter, r *http.Request) {\r\n \tvar expiresAt time.Time\r\n"
                },
                {
                    "date": 1747282622739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,8 @@\n \t\"net/http\"\r\n \r\n \t\"backand/services\"\r\n \t\"time\"\r\n-    \"input\"\r\n )\r\n \r\n func CreatePollHandler(w http.ResponseWriter, r *http.Request) {\r\n \tvar expiresAt time.Time\r\n"
                },
                {
                    "date": 1747282716126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,54 +1,62 @@\n package handlers\r\n \r\n import (\r\n-\t\"encoding/json\"\r\n-\t\"net/http\"\r\n+    \"encoding/json\"\r\n+    \"net/http\"\r\n+    \"time\"\r\n \r\n-\t\"backand/services\"\r\n-\t\"time\"\r\n+    \"backand/services\"\r\n )\r\n \r\n func CreatePollHandler(w http.ResponseWriter, r *http.Request) {\r\n-\tvar expiresAt time.Time\r\n-\tif input.ExpiresAt == \"\" {\r\n-\t\texpiresAt = time.Now().Add(7 * 24 * time.Hour) // Default 7 hari\r\n-\t} else {\r\n-\t\tvar err error\r\n-\t\texpiresAt, err = time.Parse(\"2006-01-02T15:04:05\", input.ExpiresAt)\r\n-\t\tif err != nil {\r\n-\t\t\thttp.Error(w, `{\"error\": \"invalid expiration date\"}`, http.StatusBadRequest)\r\n-\t\t\treturn\r\n-\t\t}\r\n-\t}\r\n+    var input struct {\r\n+        Title                string   `json:\"title\"`\r\n+        Description          string   `json:\"description\"`\r\n+        Options              []string `json:\"options\"`\r\n+        ExpiresAt            string   `json:\"expires_at\"`\r\n+        AllowRealtimeResults bool     `json:\"allow_realtime_results\"`\r\n+    }\r\n \r\n-\tvar input struct {\r\n-\t\tTitle                string   `json:\"title\"`\r\n-\t\tDescription          string   `json:\"description\"`\r\n-\t\tOptions              []string `json:\"options\"`\r\n-\t\tExpiresAt            string   `json:\"expires_at\"`\r\n-\t\tAllowRealtimeResults bool     `json:\"allow_realtime_results\"`\r\n-\t}\r\n+    if err := json.NewDecoder(r.Body).Decode(&input); err != nil {\r\n+        http.Error(w, \"Invalid request payload\", http.StatusBadRequest)\r\n+        return\r\n+    }\r\n \r\n-\tif err := json.NewDecoder(r.Body).Decode(&input); err != nil {\r\n-\t\thttp.Error(w, \"Invalid request payload\", http.StatusBadRequest)\r\n-\t\treturn\r\n-\t}\r\n+    // Validasi judul dan opsi\r\n+    if input.Title == \"\" || len(input.Options) < 2 {\r\n+        http.Error(w, \"Judul atau opsi polling tidak valid\", http.StatusBadRequest)\r\n+        return\r\n+    }\r\n \r\n-\tpollID, pollURL, err := services.CreatePoll(\r\n-\t\tinput.Title,\r\n-\t\tinput.Description,\r\n-\t\tinput.ExpiresAt,\r\n-\t\tinput.Options,\r\n-\t\tinput.AllowRealtimeResults,\r\n-\t)\r\n-\tif err != nil {\r\n-\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\r\n-\t\treturn\r\n-\t}\r\n+    // Parse waktu kadaluwarsa\r\n+    var expiresAt time.Time\r\n+    if input.ExpiresAt == \"\" {\r\n+        expiresAt = time.Now().Add(7 * 24 * time.Hour) // Default 7 hari\r\n+    } else {\r\n+        var err error\r\n+        expiresAt, err = time.Parse(\"2006-01-02T15:04\", input.ExpiresAt)\r\n+        if err != nil {\r\n+            http.Error(w, \"Format waktu salah. Gunakan format YYYY-MM-DDTHH:mm\",\r\n+                http.StatusBadRequest)\r\n+            return\r\n+        }\r\n+    }\r\n \r\n-\tw.Header().Set(\"Content-Type\", \"application/json\")\r\n-\tjson.NewEncoder(w).Encode(map[string]interface{}{\r\n-\t\t\"poll_id\": pollID,\r\n-\t\t\"url\":     pollURL,\r\n-\t})\r\n-}\r\n+    pollID, pollURL, err := services.CreatePoll(\r\n+        input.Title,\r\n+        input.Description,\r\n+        expiresAt,\r\n+        input.Options,\r\n+        input.AllowRealtimeResults,\r\n+    )\r\n+    if err != nil {\r\n+        http.Error(w, err.Error(), http.StatusInternalServerError)\r\n+        return\r\n+    }\r\n+\r\n+    w.Header().Set(\"Content-Type\", \"application/json\")\r\n+    json.NewEncoder(w).Encode(map[string]interface{}{\r\n+        \"poll_id\": pollID,\r\n+        \"url\":     pollURL,\r\n+    })\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747282996278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,62 +0,0 @@\n-package handlers\r\n-\r\n-import (\r\n-    \"encoding/json\"\r\n-    \"net/http\"\r\n-    \"time\"\r\n-\r\n-    \"backand/services\"\r\n-)\r\n-\r\n-func CreatePollHandler(w http.ResponseWriter, r *http.Request) {\r\n-    var input struct {\r\n-        Title                string   `json:\"title\"`\r\n-        Description          string   `json:\"description\"`\r\n-        Options              []string `json:\"options\"`\r\n-        ExpiresAt            string   `json:\"expires_at\"`\r\n-        AllowRealtimeResults bool     `json:\"allow_realtime_results\"`\r\n-    }\r\n-\r\n-    if err := json.NewDecoder(r.Body).Decode(&input); err != nil {\r\n-        http.Error(w, \"Invalid request payload\", http.StatusBadRequest)\r\n-        return\r\n-    }\r\n-\r\n-    // Validasi judul dan opsi\r\n-    if input.Title == \"\" || len(input.Options) < 2 {\r\n-        http.Error(w, \"Judul atau opsi polling tidak valid\", http.StatusBadRequest)\r\n-        return\r\n-    }\r\n-\r\n-    // Parse waktu kadaluwarsa\r\n-    var expiresAt time.Time\r\n-    if input.ExpiresAt == \"\" {\r\n-        expiresAt = time.Now().Add(7 * 24 * time.Hour) // Default 7 hari\r\n-    } else {\r\n-        var err error\r\n-        expiresAt, err = time.Parse(\"2006-01-02T15:04\", input.ExpiresAt)\r\n-        if err != nil {\r\n-            http.Error(w, \"Format waktu salah. Gunakan format YYYY-MM-DDTHH:mm\",\r\n-                http.StatusBadRequest)\r\n-            return\r\n-        }\r\n-    }\r\n-\r\n-    pollID, pollURL, err := services.CreatePoll(\r\n-        input.Title,\r\n-        input.Description,\r\n-        expiresAt,\r\n-        input.Options,\r\n-        input.AllowRealtimeResults,\r\n-    )\r\n-    if err != nil {\r\n-        http.Error(w, err.Error(), http.StatusInternalServerError)\r\n-        return\r\n-    }\r\n-\r\n-    w.Header().Set(\"Content-Type\", \"application/json\")\r\n-    json.NewEncoder(w).Encode(map[string]interface{}{\r\n-        \"poll_id\": pollID,\r\n-        \"url\":     pollURL,\r\n-    })\r\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747283008064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,54 @@\n+package handlers\r\n+\r\n+import (\r\n+\t\"encoding/json\"\r\n+\t\"net/http\"\r\n+\r\n+\t\"backand/services\"\r\n+\t\"time\"\r\n+)\r\n+\r\n+func CreatePollHandler(w http.ResponseWriter, r *http.Request) {\r\n+\tvar expiresAt time.Time\r\n+\tif input.ExpiresAt == \"\" {\r\n+\t\texpiresAt = time.Now().Add(7 * 24 * time.Hour) // Default 7 hari\r\n+\t} else {\r\n+\t\tvar err error\r\n+\t\texpiresAt, err = time.Parse(\"2006-01-02T15:04:05\", input.ExpiresAt)\r\n+\t\tif err != nil {\r\n+\t\t\thttp.Error(w, `{\"error\": \"invalid expiration date\"}`, http.StatusBadRequest)\r\n+\t\t\treturn\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tvar input struct {\r\n+\t\tTitle                string   `json:\"title\"`\r\n+\t\tDescription          string   `json:\"description\"`\r\n+\t\tOptions              []string `json:\"options\"`\r\n+\t\tExpiresAt            string   `json:\"expires_at\"`\r\n+\t\tAllowRealtimeResults bool     `json:\"allow_realtime_results\"`\r\n+\t}\r\n+\r\n+\tif err := json.NewDecoder(r.Body).Decode(&input); err != nil {\r\n+\t\thttp.Error(w, \"Invalid request payload\", http.StatusBadRequest)\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\tpollID, pollURL, err := services.CreatePoll(\r\n+\t\tinput.Title,\r\n+\t\tinput.Description,\r\n+\t\tinput.ExpiresAt,\r\n+\t\tinput.Options,\r\n+\t\tinput.AllowRealtimeResults,\r\n+\t)\r\n+\tif err != nil {\r\n+\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\r\n+\t\treturn\r\n+\t}\r\n+\r\n+\tw.Header().Set(\"Content-Type\", \"application/json\")\r\n+\tjson.NewEncoder(w).Encode(map[string]interface{}{\r\n+\t\t\"poll_id\": pollID,\r\n+\t\t\"url\":     pollURL,\r\n+\t})\r\n+}\r\n"
                },
                {
                    "date": 1747283016957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,54 +1,43 @@\n package handlers\r\n \r\n import (\r\n-\t\"encoding/json\"\r\n-\t\"net/http\"\r\n+    \"encoding/json\"\r\n+    \"net/http\"\r\n \r\n-\t\"backand/services\"\r\n-\t\"time\"\r\n+    \"backand/services\"\r\n )\r\n \r\n func CreatePollHandler(w http.ResponseWriter, r *http.Request) {\r\n-\tvar expiresAt time.Time\r\n-\tif input.ExpiresAt == \"\" {\r\n-\t\texpiresAt = time.Now().Add(7 * 24 * time.Hour) // Default 7 hari\r\n-\t} else {\r\n-\t\tvar err error\r\n-\t\texpiresAt, err = time.Parse(\"2006-01-02T15:04:05\", input.ExpiresAt)\r\n-\t\tif err != nil {\r\n-\t\t\thttp.Error(w, `{\"error\": \"invalid expiration date\"}`, http.StatusBadRequest)\r\n-\t\t\treturn\r\n-\t\t}\r\n-\t}\r\n+    var \r\n \r\n-\tvar input struct {\r\n-\t\tTitle                string   `json:\"title\"`\r\n-\t\tDescription          string   `json:\"description\"`\r\n-\t\tOptions              []string `json:\"options\"`\r\n-\t\tExpiresAt            string   `json:\"expires_at\"`\r\n-\t\tAllowRealtimeResults bool     `json:\"allow_realtime_results\"`\r\n-\t}\r\n+    var input struct {\r\n+        Title                string   `json:\"title\"`\r\n+        Description          string   `json:\"description\"`\r\n+        Options              []string `json:\"options\"`\r\n+        ExpiresAt            string   `json:\"expires_at\"`\r\n+        AllowRealtimeResults bool     `json:\"allow_realtime_results\"`\r\n+    }\r\n \r\n-\tif err := json.NewDecoder(r.Body).Decode(&input); err != nil {\r\n-\t\thttp.Error(w, \"Invalid request payload\", http.StatusBadRequest)\r\n-\t\treturn\r\n-\t}\r\n+    if err := json.NewDecoder(r.Body).Decode(&input); err != nil {\r\n+        http.Error(w, \"Invalid request payload\", http.StatusBadRequest)\r\n+        return\r\n+    }\r\n \r\n-\tpollID, pollURL, err := services.CreatePoll(\r\n-\t\tinput.Title,\r\n-\t\tinput.Description,\r\n-\t\tinput.ExpiresAt,\r\n-\t\tinput.Options,\r\n-\t\tinput.AllowRealtimeResults,\r\n-\t)\r\n-\tif err != nil {\r\n-\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\r\n-\t\treturn\r\n-\t}\r\n+    pollID, pollURL, err := services.CreatePoll(\r\n+        input.Title,\r\n+        input.Description,\r\n+        input.ExpiresAt,\r\n+        input.Options,\r\n+        input.AllowRealtimeResults,\r\n+    )\r\n+    if err != nil {\r\n+        http.Error(w, err.Error(), http.StatusInternalServerError)\r\n+        return\r\n+    }\r\n \r\n-\tw.Header().Set(\"Content-Type\", \"application/json\")\r\n-\tjson.NewEncoder(w).Encode(map[string]interface{}{\r\n-\t\t\"poll_id\": pollID,\r\n-\t\t\"url\":     pollURL,\r\n-\t})\r\n-}\r\n+    w.Header().Set(\"Content-Type\", \"application/json\")\r\n+    json.NewEncoder(w).Encode(map[string]interface{}{\r\n+        \"poll_id\": pollID,\r\n+        \"url\":     pollURL,\r\n+    })\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747283408557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,10 +7,8 @@\n     \"backand/services\"\r\n )\r\n \r\n func CreatePollHandler(w http.ResponseWriter, r *http.Request) {\r\n-    var \r\n-\r\n     var input struct {\r\n         Title                string   `json:\"title\"`\r\n         Description          string   `json:\"description\"`\r\n         Options              []string `json:\"options\"`\r\n"
                },
                {
                    "date": 1747283514757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n     \"encoding/json\"\r\n     \"net/http\"\r\n \r\n     \"backand/services\"\r\n+    \r\n )\r\n \r\n func CreatePollHandler(w http.ResponseWriter, r *http.Request) {\r\n     var input struct {\r\n"
                },
                {
                    "date": 1747283520201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n     \"encoding/json\"\r\n     \"net/http\"\r\n \r\n     \"backand/services\"\r\n-    \r\n+    \"backand/config\"\r\n )\r\n \r\n func CreatePollHandler(w http.ResponseWriter, r *http.Request) {\r\n     var input struct {\r\n"
                },
                {
                    "date": 1747283561149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,8 @@\n     \"encoding/json\"\r\n     \"net/http\"\r\n \r\n     \"backand/services\"\r\n-    \"backand/config\"\r\n )\r\n \r\n func CreatePollHandler(w http.ResponseWriter, r *http.Request) {\r\n     var input struct {\r\n"
                },
                {
                    "date": 1747285573591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n     \"encoding/json\"\r\n     \"net/http\"\r\n \r\n     \"backand/services\"\r\n+\r\n )\r\n \r\n func CreatePollHandler(w http.ResponseWriter, r *http.Request) {\r\n     var input struct {\r\n"
                },
                {
                    "date": 1747292493330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,39 +4,27 @@\n     \"encoding/json\"\r\n     \"net/http\"\r\n \r\n     \"backand/services\"\r\n-\r\n )\r\n \r\n func CreatePollHandler(w http.ResponseWriter, r *http.Request) {\r\n-    var input struct {\r\n-        Title                string   `json:\"title\"`\r\n-        Description          string   `json:\"description\"`\r\n-        Options              []string `json:\"options\"`\r\n-        ExpiresAt            string   `json:\"expires_at\"`\r\n-        AllowRealtimeResults bool     `json:\"allow_realtime_results\"`\r\n-    }\r\n-\r\n+    var input models.CreatePollRequest\r\n     if err := json.NewDecoder(r.Body).Decode(&input); err != nil {\r\n         http.Error(w, \"Invalid request payload\", http.StatusBadRequest)\r\n         return\r\n     }\r\n \r\n-    pollID, pollURL, err := services.CreatePoll(\r\n-        input.Title,\r\n-        input.Description,\r\n-        input.ExpiresAt,\r\n-        input.Options,\r\n-        input.AllowRealtimeResults,\r\n-    )\r\n+    service := service.NewCreatePollService()\r\n+    result, err := service.CreatePoll(input.Title, input.Description, input.Options)\r\n     if err != nil {\r\n-        http.Error(w, err.Error(), http.StatusInternalServerError)\r\n+        http.Error(w, fmt.Sprintf(`{\"error\": \"%s\"}`, err.Error()), http.StatusInternalServerError)\r\n         return\r\n     }\r\n \r\n     w.Header().Set(\"Content-Type\", \"application/json\")\r\n     json.NewEncoder(w).Encode(map[string]interface{}{\r\n-        \"poll_id\": pollID,\r\n-        \"url\":     pollURL,\r\n+        \"poll_id\":     result.PollID,\r\n+        \"voting_url\":  result.VotingURL,\r\n+        \"dashboard_url\": result.DashboardURL,\r\n     })\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747292500852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,24 +7,35 @@\n     \"backand/services\"\r\n )\r\n \r\n func CreatePollHandler(w http.ResponseWriter, r *http.Request) {\r\n-    var input models.CreatePollRequest\r\n+    var input struct {\r\n+        Title                string   `json:\"title\"`\r\n+        Description          string   `json:\"description\"`\r\n+        Options              []string `json:\"options\"`\r\n+        ExpiresAt            string   `json:\"expires_at\"`\r\n+        AllowRealtimeResults bool     `json:\"allow_realtime_results\"`\r\n+    }\r\n+\r\n     if err := json.NewDecoder(r.Body).Decode(&input); err != nil {\r\n         http.Error(w, \"Invalid request payload\", http.StatusBadRequest)\r\n         return\r\n     }\r\n \r\n-    service := service.NewCreatePollService()\r\n-    result, err := service.CreatePoll(input.Title, input.Description, input.Options)\r\n+    pollID, pollURL, err := services.CreatePoll(\r\n+        input.Title,\r\n+        input.Description,\r\n+        input.ExpiresAt,\r\n+        input.Options,\r\n+        input.AllowRealtimeResults,\r\n+    )\r\n     if err != nil {\r\n-        http.Error(w, fmt.Sprintf(`{\"error\": \"%s\"}`, err.Error()), http.StatusInternalServerError)\r\n+        http.Error(w, err.Error(), http.StatusInternalServerError)\r\n         return\r\n     }\r\n \r\n     w.Header().Set(\"Content-Type\", \"application/json\")\r\n     json.NewEncoder(w).Encode(map[string]interface{}{\r\n-        \"poll_id\":     result.PollID,\r\n-        \"voting_url\":  result.VotingURL,\r\n-        \"dashboard_url\": result.DashboardURL,\r\n+        \"poll_id\": pollID,\r\n+        \"url\":     pollURL,\r\n     })\r\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1747213500217,
            "name": "Commit-0",
            "content": "package handlers"
        }
    ]
}
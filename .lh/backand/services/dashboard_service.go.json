{
    "sourceFile": "backand/services/dashboard_service.go",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1747213538777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747213937361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,52 @@\n-package services\n\\ No newline at end of file\n+package services\r\n+\r\n+import (\r\n+    \"database/sql\"\r\n+    \"fmt\"\r\n+\r\n+    \"quickpoll/config\"\r\n+)\r\n+\r\n+type PollSummary struct {\r\n+    ID          string `json:\"id\"`\r\n+    Title       string `json:\"title\"`\r\n+    Description string `json:\"description\"`\r\n+    Status      string `json:\"status\"`\r\n+    VoteCount   int    `json:\"vote_count\"`\r\n+    ExpiresAt   string `json:\"expires_at\"`\r\n+}\r\n+\r\n+func GetPollsForDashboard() ([]PollSummary, error) {\r\n+    rows, err := config.DB.Query(`\r\n+        SELECT p.id, p.title, p.description, p.status, COUNT(v.id) AS vote_count, p.expires_at\r\n+        FROM polls p\r\n+        LEFT JOIN votes v ON p.id = v.poll_id\r\n+        GROUP BY p.id`)\r\n+    if err != nil {\r\n+        return nil, err\r\n+    }\r\n+    defer rows.Close()\r\n+\r\n+    var polls []PollSummary\r\n+    for rows.Next() {\r\n+        var p PollSummary\r\n+        if err := rows.Scan(&p.ID, &p.Title, &p.Description, &p.Status, &p.VoteCount, &p.ExpiresAt); err != nil {\r\n+            return nil, err\r\n+        }\r\n+        polls = append(polls, p)\r\n+    }\r\n+\r\n+    return polls, nil\r\n+}\r\n+\r\n+func GetPollDetails(pollID string) (*PollSummary, error) {\r\n+    row := config.DB.QueryRow(\"SELECT id, title, description, status, expires_at FROM polls WHERE id = ?\", pollID)\r\n+    var p PollSummary\r\n+    if err := row.Scan(&p.ID, &p.Title, &p.Description, &p.Status, &p.ExpiresAt); err != nil {\r\n+        if err == sql.ErrNoRows {\r\n+            return nil, fmt.Errorf(\"poll not found\")\r\n+        }\r\n+        return nil, err\r\n+    }\r\n+    return &p, nil\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747213947495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import (\r\n     \"database/sql\"\r\n     \"fmt\"\r\n \r\n-    \"quickpoll/config\"\r\n+    \"backand/config\"\r\n )\r\n \r\n type PollSummary struct {\r\n     ID          string `json:\"id\"`\r\n"
                },
                {
                    "date": 1747222606151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,51 +2,155 @@\n \r\n import (\r\n     \"database/sql\"\r\n     \"fmt\"\r\n+    \"time\"\r\n \r\n     \"backand/config\"\r\n )\r\n \r\n type PollSummary struct {\r\n-    ID          string `json:\"id\"`\r\n-    Title       string `json:\"title\"`\r\n-    Description string `json:\"description\"`\r\n-    Status      string `json:\"status\"`\r\n-    VoteCount   int    `json:\"vote_count\"`\r\n-    ExpiresAt   string `json:\"expires_at\"`\r\n+    ID                   string `json:\"id\"`\r\n+    Title                string `json:\"title\"`\r\n+    Description          string `json:\"description\"`\r\n+    Status               string `json:\"status\"`         // open / closed\r\n+    VoteCount            int    `json:\"vote_count\"`     // jumlah voter\r\n+    ExpiresAt            string `json:\"expires_at\"`     // format user-friendly\r\n+    OptionCount          int    `json:\"option_count\"`   // jumlah opsi jawaban\r\n+    AllowRealtimeResults bool   `json:\"allow_realtime\"` // apakah peserta bisa lihat hasil saat aktif\r\n }\r\n \r\n func GetPollsForDashboard() ([]PollSummary, error) {\r\n-    rows, err := config.DB.Query(`\r\n-        SELECT p.id, p.title, p.description, p.status, COUNT(v.id) AS vote_count, p.expires_at\r\n+    query := `\r\n+        SELECT \r\n+            p.id, \r\n+            p.title, \r\n+            p.description, \r\n+            p.status, \r\n+            COUNT(v.id) AS vote_count, \r\n+            COUNT(po.id) AS option_count,\r\n+            p.expires_at,\r\n+            p.allow_realtime_results\r\n         FROM polls p\r\n         LEFT JOIN votes v ON p.id = v.poll_id\r\n-        GROUP BY p.id`)\r\n+        LEFT JOIN poll_options po ON p.id = po.poll_id\r\n+        GROUP BY p.id\r\n+    `\r\n+\r\n+    rows, err := config.DB.Query(query)\r\n     if err != nil {\r\n         return nil, err\r\n     }\r\n     defer rows.Close()\r\n \r\n     var polls []PollSummary\r\n     for rows.Next() {\r\n-        var p PollSummary\r\n-        if err := rows.Scan(&p.ID, &p.Title, &p.Description, &p.Status, &p.VoteCount, &p.ExpiresAt); err != nil {\r\n+        var (\r\n+            pollID             string\r\n+            title              string\r\n+            description        sql.NullString\r\n+            status             string\r\n+            voteCount          int\r\n+            optionCount        int\r\n+            expiresAt          string\r\n+            allowRealtime      bool\r\n+        )\r\n+\r\n+        err := rows.Scan(\r\n+            &pollID,\r\n+            &title,\r\n+            &description,\r\n+            &status,\r\n+            &voteCount,\r\n+            &optionCount,\r\n+            &expiresAt,\r\n+            &allowRealtime,\r\n+        )\r\n+\r\n+        if err != nil {\r\n             return nil, err\r\n         }\r\n-        polls = append(polls, p)\r\n+\r\n+        // Format expires_at menjadi lebih friendly\r\n+        formattedTime := parseTime(expiresAt)\r\n+\r\n+        polls = append(polls, PollSummary{\r\n+            ID:                 pollID,\r\n+            Title:              title,\r\n+            Description:        description.String,\r\n+            Status:             status,\r\n+            VoteCount:          voteCount,\r\n+            OptionCount:        optionCount,\r\n+            ExpiresAt:          formattedTime,\r\n+            AllowRealtimeResults: allowRealtime,\r\n+        })\r\n     }\r\n \r\n     return polls, nil\r\n }\r\n \r\n func GetPollDetails(pollID string) (*PollSummary, error) {\r\n-    row := config.DB.QueryRow(\"SELECT id, title, description, status, expires_at FROM polls WHERE id = ?\", pollID)\r\n-    var p PollSummary\r\n-    if err := row.Scan(&p.ID, &p.Title, &p.Description, &p.Status, &p.ExpiresAt); err != nil {\r\n+    row := config.DB.QueryRow(`\r\n+        SELECT \r\n+            id, \r\n+            title, \r\n+            description, \r\n+            status, \r\n+            expires_at,\r\n+            allow_realtime_results\r\n+        FROM polls WHERE id = ?`, pollID)\r\n+\r\n+    var (\r\n+        id             string\r\n+        title          string\r\n+        desc           sql.NullString\r\n+        status         string\r\n+        expiresAt      string\r\n+        allowRealtime  bool\r\n+    )\r\n+\r\n+    if err := row.Scan(&id, &title, &desc, &status, &expiresAt, &allowRealtime); err != nil {\r\n         if err == sql.ErrNoRows {\r\n             return nil, fmt.Errorf(\"poll not found\")\r\n         }\r\n         return nil, err\r\n     }\r\n-    return &p, nil\r\n+\r\n+    // Hitung jumlah opsi jawaban\r\n+    var optionCount int\r\n+    err := config.DB.QueryRow(\"SELECT COUNT(*) FROM poll_options WHERE poll_id = ?\", pollID).Scan(&optionCount)\r\n+    if err != nil {\r\n+        return nil, err\r\n+    }\r\n+\r\n+    // Hitung jumlah suara\r\n+    var voteCount int\r\n+    err = config.DB.QueryRow(\"SELECT COUNT(*) FROM votes WHERE poll_id = ?\", pollID).Scan(&voteCount)\r\n+    if err != nil {\r\n+        return nil, err\r\n+    }\r\n+\r\n+    // Format waktu\r\n+    formattedTime := parseTime(expiresAt)\r\n+\r\n+    poll := &PollSummary{\r\n+        ID:                 id,\r\n+        Title:              title,\r\n+        Description:        desc.String,\r\n+        Status:             status,\r\n+        ExpiresAt:          formattedTime,\r\n+        AllowRealtimeResults: allowRealtime,\r\n+        OptionCount:        optionCount,\r\n+        VoteCount:          voteCount,\r\n+    }\r\n+\r\n+    return poll, nil\r\n+}\r\n+\r\n+// Fungsi bantuan untuk parsing waktu\r\n+func parseTime(timeStr string) string {\r\n+    t, err := time.Parse(\"2006-01-02 15:04:05\", timeStr)\r\n+    if err != nil {\r\n+        return timeStr\r\n+    }\r\n+    return t.Format(\"02 Januari 2006, 15:04 WIB\")\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747284834647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,71 +13,66 @@\n     Title                string `json:\"title\"`\r\n     Description          string `json:\"description\"`\r\n     Status               string `json:\"status\"`         // open / closed\r\n     VoteCount            int    `json:\"vote_count\"`     // jumlah voter\r\n+    OptionCount          int    `json:\"option_count\"`   // jumlah opsi jawaban\r\n     ExpiresAt            string `json:\"expires_at\"`     // format user-friendly\r\n-    OptionCount          int    `json:\"option_count\"`   // jumlah opsi jawaban\r\n     AllowRealtimeResults bool   `json:\"allow_realtime\"` // apakah peserta bisa lihat hasil saat aktif\r\n }\r\n \r\n func GetPollsForDashboard() ([]PollSummary, error) {\r\n-    query := `\r\n+    rows, err := config.DB.Query(`\r\n         SELECT \r\n             p.id, \r\n             p.title, \r\n             p.description, \r\n-            p.status, \r\n-            COUNT(v.id) AS vote_count, \r\n-            COUNT(po.id) AS option_count,\r\n+            p.status,\r\n             p.expires_at,\r\n             p.allow_realtime_results\r\n         FROM polls p\r\n-        LEFT JOIN votes v ON p.id = v.poll_id\r\n-        LEFT JOIN poll_options po ON p.id = po.poll_id\r\n-        GROUP BY p.id\r\n-    `\r\n-\r\n-    rows, err := config.DB.Query(query)\r\n+    `)\r\n     if err != nil {\r\n-        return nil, err\r\n+        return nil, fmt.Errorf(\"gagal mengambil daftar polling: %v\", err)\r\n     }\r\n     defer rows.Close()\r\n \r\n     var polls []PollSummary\r\n     for rows.Next() {\r\n         var (\r\n-            pollID             string\r\n-            title              string\r\n-            description        sql.NullString\r\n-            status             string\r\n-            voteCount          int\r\n-            optionCount        int\r\n-            expiresAt          string\r\n-            allowRealtime      bool\r\n+            id             string\r\n+            title          string\r\n+            desc           sql.NullString\r\n+            status         string\r\n+            expiresAt      string\r\n+            allowRealtime  bool\r\n         )\r\n \r\n-        err := rows.Scan(\r\n-            &pollID,\r\n-            &title,\r\n-            &description,\r\n-            &status,\r\n-            &voteCount,\r\n-            &optionCount,\r\n-            &expiresAt,\r\n-            &allowRealtime,\r\n-        )\r\n-\r\n+        err := rows.Scan(&id, &title, &desc, &status, &expiresAt, &allowRealtime)\r\n         if err != nil {\r\n             return nil, err\r\n         }\r\n \r\n-        // Format expires_at menjadi lebih friendly\r\n+        // Hitung vote_count per polling\r\n+        var voteCount int\r\n+        err = config.DB.QueryRow(\"SELECT COUNT(*) FROM votes WHERE poll_id = ?\", id).Scan(&voteCount)\r\n+        if err != nil {\r\n+            return nil, fmt.Errorf(\"gagal menghitung jumlah suara untuk polling %s: %v\", id, err)\r\n+        }\r\n+\r\n+        // Hitung option_count per polling\r\n+        var optionCount int\r\n+        err = config.DB.QueryRow(\"SELECT COUNT(*) FROM poll_options WHERE poll_id = ?\", id).Scan(&optionCount)\r\n+        if err != nil {\r\n+            return nil, fmt.Errorf(\"gagal menghitung jumlah opsi untuk polling %s: %v\", id, err)\r\n+        }\r\n+\r\n+        // Format waktu\r\n         formattedTime := parseTime(expiresAt)\r\n \r\n         polls = append(polls, PollSummary{\r\n-            ID:                 pollID,\r\n+            ID:                 id,\r\n             Title:              title,\r\n-            Description:        description.String,\r\n+            Description:        desc.String,\r\n             Status:             status,\r\n             VoteCount:          voteCount,\r\n             OptionCount:        optionCount,\r\n             ExpiresAt:          formattedTime,\r\n@@ -111,23 +106,23 @@\n     if err := row.Scan(&id, &title, &desc, &status, &expiresAt, &allowRealtime); err != nil {\r\n         if err == sql.ErrNoRows {\r\n             return nil, fmt.Errorf(\"poll not found\")\r\n         }\r\n-        return nil, err\r\n+        return nil, fmt.Errorf(\"gagal mendapatkan detail polling: %v\", err)\r\n     }\r\n \r\n     // Hitung jumlah opsi jawaban\r\n     var optionCount int\r\n-    err := config.DB.QueryRow(\"SELECT COUNT(*) FROM poll_options WHERE poll_id = ?\", pollID).Scan(&optionCount)\r\n+    err = config.DB.QueryRow(\"SELECT COUNT(*) FROM poll_options WHERE poll_id = ?\", pollID).Scan(&optionCount)\r\n     if err != nil {\r\n-        return nil, err\r\n+        return nil, fmt.Errorf(\"gagal menghitung jumlah opsi: %v\", err)\r\n     }\r\n \r\n     // Hitung jumlah suara\r\n     var voteCount int\r\n     err = config.DB.QueryRow(\"SELECT COUNT(*) FROM votes WHERE poll_id = ?\", pollID).Scan(&voteCount)\r\n     if err != nil {\r\n-        return nil, err\r\n+        return nil, fmt.Errorf(\"gagal menghitung jumlah suara: %v\", err)\r\n     }\r\n \r\n     // Format waktu\r\n     formattedTime := parseTime(expiresAt)\r\n@@ -145,12 +140,17 @@\n \r\n     return poll, nil\r\n }\r\n \r\n-// Fungsi bantuan untuk parsing waktu\r\n+// Fungsi bantuan parsing waktu\r\n func parseTime(timeStr string) string {\r\n     t, err := time.Parse(\"2006-01-02 15:04:05\", timeStr)\r\n     if err != nil {\r\n-        return timeStr\r\n+        // Coba parsing ulang dengan format yang berbeda (misalnya ISO8601)\r\n+        t2, err2 := time.Parse(time.RFC3339, timeStr)\r\n+        if err2 != nil {\r\n+            return timeStr\r\n+        }\r\n+        return t2.Format(\"02 Januari 2006, 15:04 WIB\")\r\n     }\r\n     return t.Format(\"02 Januari 2006, 15:04 WIB\")\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747284844939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n     }\r\n \r\n     // Hitung jumlah opsi jawaban\r\n     var optionCount int\r\n-    err = config.DB.QueryRow(\"SELECT COUNT(*) FROM poll_options WHERE poll_id = ?\", pollID).Scan(&optionCount)\r\n+    err := config.DB.QueryRow(\"SELECT COUNT(*) FROM poll_options WHERE poll_id = ?\", pollID).Scan(&optionCount)\r\n     if err != nil {\r\n         return nil, fmt.Errorf(\"gagal menghitung jumlah opsi: %v\", err)\r\n     }\r\n \r\n"
                },
                {
                    "date": 1747285248483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,66 +13,71 @@\n     Title                string `json:\"title\"`\r\n     Description          string `json:\"description\"`\r\n     Status               string `json:\"status\"`         // open / closed\r\n     VoteCount            int    `json:\"vote_count\"`     // jumlah voter\r\n+    ExpiresAt            string `json:\"expires_at\"`     // format user-friendly\r\n     OptionCount          int    `json:\"option_count\"`   // jumlah opsi jawaban\r\n-    ExpiresAt            string `json:\"expires_at\"`     // format user-friendly\r\n     AllowRealtimeResults bool   `json:\"allow_realtime\"` // apakah peserta bisa lihat hasil saat aktif\r\n }\r\n \r\n func GetPollsForDashboard() ([]PollSummary, error) {\r\n-    rows, err := config.DB.Query(`\r\n+    query := `\r\n         SELECT \r\n             p.id, \r\n             p.title, \r\n             p.description, \r\n-            p.status,\r\n+            p.status, \r\n+            COUNT(v.id) AS vote_count, \r\n+            COUNT(po.id) AS option_count,\r\n             p.expires_at,\r\n             p.allow_realtime_results\r\n         FROM polls p\r\n-    `)\r\n+        LEFT JOIN votes v ON p.id = v.poll_id\r\n+        LEFT JOIN poll_options po ON p.id = po.poll_id\r\n+        GROUP BY p.id\r\n+    `\r\n+\r\n+    rows, err := config.DB.Query(query)\r\n     if err != nil {\r\n-        return nil, fmt.Errorf(\"gagal mengambil daftar polling: %v\", err)\r\n+        return nil, err\r\n     }\r\n     defer rows.Close()\r\n \r\n     var polls []PollSummary\r\n     for rows.Next() {\r\n         var (\r\n-            id             string\r\n-            title          string\r\n-            desc           sql.NullString\r\n-            status         string\r\n-            expiresAt      string\r\n-            allowRealtime  bool\r\n+            pollID             string\r\n+            title              string\r\n+            description        sql.NullString\r\n+            status             string\r\n+            voteCount          int\r\n+            optionCount        int\r\n+            expiresAt          string\r\n+            allowRealtime      bool\r\n         )\r\n \r\n-        err := rows.Scan(&id, &title, &desc, &status, &expiresAt, &allowRealtime)\r\n+        err := rows.Scan(\r\n+            &pollID,\r\n+            &title,\r\n+            &description,\r\n+            &status,\r\n+            &voteCount,\r\n+            &optionCount,\r\n+            &expiresAt,\r\n+            &allowRealtime,\r\n+        )\r\n+\r\n         if err != nil {\r\n             return nil, err\r\n         }\r\n \r\n-        // Hitung vote_count per polling\r\n-        var voteCount int\r\n-        err = config.DB.QueryRow(\"SELECT COUNT(*) FROM votes WHERE poll_id = ?\", id).Scan(&voteCount)\r\n-        if err != nil {\r\n-            return nil, fmt.Errorf(\"gagal menghitung jumlah suara untuk polling %s: %v\", id, err)\r\n-        }\r\n-\r\n-        // Hitung option_count per polling\r\n-        var optionCount int\r\n-        err = config.DB.QueryRow(\"SELECT COUNT(*) FROM poll_options WHERE poll_id = ?\", id).Scan(&optionCount)\r\n-        if err != nil {\r\n-            return nil, fmt.Errorf(\"gagal menghitung jumlah opsi untuk polling %s: %v\", id, err)\r\n-        }\r\n-\r\n-        // Format waktu\r\n+        // Format expires_at menjadi lebih friendly\r\n         formattedTime := parseTime(expiresAt)\r\n \r\n         polls = append(polls, PollSummary{\r\n-            ID:                 id,\r\n+            ID:                 pollID,\r\n             Title:              title,\r\n-            Description:        desc.String,\r\n+            Description:        description.String,\r\n             Status:             status,\r\n             VoteCount:          voteCount,\r\n             OptionCount:        optionCount,\r\n             ExpiresAt:          formattedTime,\r\n@@ -106,23 +111,23 @@\n     if err := row.Scan(&id, &title, &desc, &status, &expiresAt, &allowRealtime); err != nil {\r\n         if err == sql.ErrNoRows {\r\n             return nil, fmt.Errorf(\"poll not found\")\r\n         }\r\n-        return nil, fmt.Errorf(\"gagal mendapatkan detail polling: %v\", err)\r\n+        return nil, err\r\n     }\r\n \r\n     // Hitung jumlah opsi jawaban\r\n     var optionCount int\r\n     err := config.DB.QueryRow(\"SELECT COUNT(*) FROM poll_options WHERE poll_id = ?\", pollID).Scan(&optionCount)\r\n     if err != nil {\r\n-        return nil, fmt.Errorf(\"gagal menghitung jumlah opsi: %v\", err)\r\n+        return nil, err\r\n     }\r\n \r\n     // Hitung jumlah suara\r\n     var voteCount int\r\n     err = config.DB.QueryRow(\"SELECT COUNT(*) FROM votes WHERE poll_id = ?\", pollID).Scan(&voteCount)\r\n     if err != nil {\r\n-        return nil, fmt.Errorf(\"gagal menghitung jumlah suara: %v\", err)\r\n+        return nil, err\r\n     }\r\n \r\n     // Format waktu\r\n     formattedTime := parseTime(expiresAt)\r\n@@ -140,17 +145,12 @@\n \r\n     return poll, nil\r\n }\r\n \r\n-// Fungsi bantuan parsing waktu\r\n+// Fungsi bantuan untuk parsing waktu\r\n func parseTime(timeStr string) string {\r\n     t, err := time.Parse(\"2006-01-02 15:04:05\", timeStr)\r\n     if err != nil {\r\n-        // Coba parsing ulang dengan format yang berbeda (misalnya ISO8601)\r\n-        t2, err2 := time.Parse(time.RFC3339, timeStr)\r\n-        if err2 != nil {\r\n-            return timeStr\r\n-        }\r\n-        return t2.Format(\"02 Januari 2006, 15:04 WIB\")\r\n+        return timeStr\r\n     }\r\n     return t.Format(\"02 Januari 2006, 15:04 WIB\")\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747286485044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,71 +13,66 @@\n     Title                string `json:\"title\"`\r\n     Description          string `json:\"description\"`\r\n     Status               string `json:\"status\"`         // open / closed\r\n     VoteCount            int    `json:\"vote_count\"`     // jumlah voter\r\n+    OptionCount          int    `json:\"option_count\"`   // jumlah opsi jawaban\r\n     ExpiresAt            string `json:\"expires_at\"`     // format user-friendly\r\n-    OptionCount          int    `json:\"option_count\"`   // jumlah opsi jawaban\r\n     AllowRealtimeResults bool   `json:\"allow_realtime\"` // apakah peserta bisa lihat hasil saat aktif\r\n }\r\n \r\n func GetPollsForDashboard() ([]PollSummary, error) {\r\n-    query := `\r\n+    rows, err := config.DB.Query(`\r\n         SELECT \r\n             p.id, \r\n             p.title, \r\n             p.description, \r\n-            p.status, \r\n-            COUNT(v.id) AS vote_count, \r\n-            COUNT(po.id) AS option_count,\r\n+            p.status,\r\n             p.expires_at,\r\n             p.allow_realtime_results\r\n         FROM polls p\r\n-        LEFT JOIN votes v ON p.id = v.poll_id\r\n-        LEFT JOIN poll_options po ON p.id = po.poll_id\r\n-        GROUP BY p.id\r\n-    `\r\n-\r\n-    rows, err := config.DB.Query(query)\r\n+    `)\r\n     if err != nil {\r\n-        return nil, err\r\n+        return nil, fmt.Errorf(\"gagal mengambil daftar polling: %v\", err)\r\n     }\r\n     defer rows.Close()\r\n \r\n     var polls []PollSummary\r\n     for rows.Next() {\r\n         var (\r\n-            pollID             string\r\n-            title              string\r\n-            description        sql.NullString\r\n-            status             string\r\n-            voteCount          int\r\n-            optionCount        int\r\n-            expiresAt          string\r\n-            allowRealtime      bool\r\n+            id             string\r\n+            title          string\r\n+            desc           sql.NullString\r\n+            status         string\r\n+            expiresAt      string\r\n+            allowRealtime  bool\r\n         )\r\n \r\n-        err := rows.Scan(\r\n-            &pollID,\r\n-            &title,\r\n-            &description,\r\n-            &status,\r\n-            &voteCount,\r\n-            &optionCount,\r\n-            &expiresAt,\r\n-            &allowRealtime,\r\n-        )\r\n-\r\n+        err := rows.Scan(&id, &title, &desc, &status, &expiresAt, &allowRealtime)\r\n         if err != nil {\r\n             return nil, err\r\n         }\r\n \r\n-        // Format expires_at menjadi lebih friendly\r\n+        // Hitung vote_count per polling\r\n+        var voteCount int\r\n+        err = config.DB.QueryRow(\"SELECT COUNT(*) FROM votes WHERE poll_id = ?\", id).Scan(&voteCount)\r\n+        if err != nil {\r\n+            return nil, fmt.Errorf(\"gagal menghitung jumlah suara untuk polling %s: %v\", id, err)\r\n+        }\r\n+\r\n+        // Hitung option_count per polling\r\n+        var optionCount int\r\n+        err = config.DB.QueryRow(\"SELECT COUNT(*) FROM poll_options WHERE poll_id = ?\", id).Scan(&optionCount)\r\n+        if err != nil {\r\n+            return nil, fmt.Errorf(\"gagal menghitung jumlah opsi untuk polling %s: %v\", id, err)\r\n+        }\r\n+\r\n+        // Format waktu\r\n         formattedTime := parseTime(expiresAt)\r\n \r\n         polls = append(polls, PollSummary{\r\n-            ID:                 pollID,\r\n+            ID:                 id,\r\n             Title:              title,\r\n-            Description:        description.String,\r\n+            Description:        desc.String,\r\n             Status:             status,\r\n             VoteCount:          voteCount,\r\n             OptionCount:        optionCount,\r\n             ExpiresAt:          formattedTime,\r\n@@ -111,23 +106,23 @@\n     if err := row.Scan(&id, &title, &desc, &status, &expiresAt, &allowRealtime); err != nil {\r\n         if err == sql.ErrNoRows {\r\n             return nil, fmt.Errorf(\"poll not found\")\r\n         }\r\n-        return nil, err\r\n+        return nil, fmt.Errorf(\"gagal mendapatkan detail polling: %v\", err)\r\n     }\r\n \r\n     // Hitung jumlah opsi jawaban\r\n     var optionCount int\r\n     err := config.DB.QueryRow(\"SELECT COUNT(*) FROM poll_options WHERE poll_id = ?\", pollID).Scan(&optionCount)\r\n     if err != nil {\r\n-        return nil, err\r\n+        return nil, fmt.Errorf(\"gagal menghitung jumlah opsi: %v\", err)\r\n     }\r\n \r\n     // Hitung jumlah suara\r\n     var voteCount int\r\n     err = config.DB.QueryRow(\"SELECT COUNT(*) FROM votes WHERE poll_id = ?\", pollID).Scan(&voteCount)\r\n     if err != nil {\r\n-        return nil, err\r\n+        return nil, fmt.Errorf(\"gagal menghitung jumlah suara: %v\", err)\r\n     }\r\n \r\n     // Format waktu\r\n     formattedTime := parseTime(expiresAt)\r\n@@ -145,12 +140,17 @@\n \r\n     return poll, nil\r\n }\r\n \r\n-// Fungsi bantuan untuk parsing waktu\r\n+// Fungsi bantuan parsing waktu\r\n func parseTime(timeStr string) string {\r\n     t, err := time.Parse(\"2006-01-02 15:04:05\", timeStr)\r\n     if err != nil {\r\n-        return timeStr\r\n+        // Coba parsing ulang dengan format yang berbeda (misalnya ISO8601)\r\n+        t2, err2 := time.Parse(time.RFC3339, timeStr)\r\n+        if err2 != nil {\r\n+            return timeStr\r\n+        }\r\n+        return t2.Format(\"02 Januari 2006, 15:04 WIB\")\r\n     }\r\n     return t.Format(\"02 Januari 2006, 15:04 WIB\")\r\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1747213538777,
            "name": "Commit-0",
            "content": "package services"
        }
    ]
}
{
    "sourceFile": "backand/services/userpoll_service.go",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 42,
            "patches": [
                {
                    "date": 1747213543539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747213984987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,52 @@\n-package services\n\\ No newline at end of file\n+package services\r\n+\r\n+import (\r\n+    \"database/sql\"\r\n+    \"fmt\"\r\n+\r\n+    \"quickpoll/config\"\r\n+)\r\n+\r\n+type PollData struct {\r\n+    ID          string `json:\"id\"`\r\n+    Title       string `json:\"title\"`\r\n+    Description string `json:\"description\"`\r\n+    ExpiresAt   string `json:\"expires_at\"`\r\n+    Status      string `json:\"status\"`\r\n+    Options     []Option\r\n+}\r\n+\r\n+type Option struct {\r\n+    ID    int    `json:\"id\"`\r\n+    Text  string `json:\"text\"`\r\n+    Index int    `json:\"order_index\"`\r\n+}\r\n+\r\n+func FetchPollData(pollID string) (*PollData, error) {\r\n+    row := config.DB.QueryRow(\"SELECT id, title, description, expires_at, status FROM polls WHERE id = ?\", pollID)\r\n+    var p PollData\r\n+    if err := row.Scan(&p.ID, &p.Title, &p.Description, &p.ExpiresAt, &p.Status); err != nil {\r\n+        if err == sql.ErrNoRows {\r\n+            return nil, fmt.Errorf(\"poll not found\")\r\n+        }\r\n+        return nil, err\r\n+    }\r\n+\r\n+    rows, err := config.DB.Query(\"SELECT id, option_text, order_index FROM poll_options WHERE poll_id = ?\", pollID)\r\n+    if err != nil {\r\n+        return nil, err\r\n+    }\r\n+    defer rows.Close()\r\n+\r\n+    var options []Option\r\n+    for rows.Next() {\r\n+        var o Option\r\n+        if err := rows.Scan(&o.ID, &o.Text, &o.Index); err != nil {\r\n+            return nil, err\r\n+        }\r\n+        options = append(options, o)\r\n+    }\r\n+\r\n+    p.Options = options\r\n+    return &p, nil\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747213991661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import (\r\n     \"database/sql\"\r\n     \"fmt\"\r\n \r\n-    \"quickpoll/config\"\r\n+    \"backand/config\"\r\n )\r\n \r\n type PollData struct {\r\n     ID          string `json:\"id\"`\r\n"
                },
                {
                    "date": 1747232766803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,53 @@\n+package services\r\n+\r\n+import (\r\n+    \"database/sql\"\r\n+    \"fmt\"\r\n+\r\n+    \"backand/config\"\r\n+)\r\n+\r\n+type PollData struct {\r\n+    ID          string `json:\"id\"`\r\n+    Title       string `json:\"title\"`\r\n+    Description string `json:\"description\"`\r\n+    ExpiresAt   string `json:\"expires_at\"`\r\n+    Status      string `json:\"status\"`\r\n+    Options              []Option  `json:\"options\"`\r\n+    Results              []PollResult `json:\"results,omitempty\"`\r\n+}\r\n+\r\n+type Option struct {\r\n+    ID    int    `json:\"id\"`\r\n+    Text  string `json:\"text\"`\r\n+    Index int    `json:\"order_index\"`\r\n+}\r\n+\r\n+func FetchPollData(pollID string) (*PollData, error) {\r\n+    row := config.DB.QueryRow(\"SELECT id, title, description, expires_at, status FROM polls WHERE id = ?\", pollID)\r\n+    var p PollData\r\n+    if err := row.Scan(&p.ID, &p.Title, &p.Description, &p.ExpiresAt, &p.Status); err != nil {\r\n+        if err == sql.ErrNoRows {\r\n+            return nil, fmt.Errorf(\"poll not found\")\r\n+        }\r\n+        return nil, err\r\n+    }\r\n+\r\n+    rows, err := config.DB.Query(\"SELECT id, option_text, order_index FROM poll_options WHERE poll_id = ?\", pollID)\r\n+    if err != nil {\r\n+        return nil, err\r\n+    }\r\n+    defer rows.Close()\r\n+\r\n+    var options []Option\r\n+    for rows.Next() {\r\n+        var o Option\r\n+        if err := rows.Scan(&o.ID, &o.Text, &o.Index); err != nil {\r\n+            return nil, err\r\n+        }\r\n+        options = append(options, o)\r\n+    }\r\n+\r\n+    p.Options = options\r\n+    return &p, nil\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747232777219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,13 @@\n     Text  string `json:\"text\"`\r\n     Index int    `json:\"order_index\"`\r\n }\r\n \r\n+type PollResult struct {\r\n+    OptionText string `json:\"option_text\"`\r\n+    TotalVotes int    `json:\"total_votes\"`\r\n+}\r\n+\r\n func FetchPollData(pollID string) (*PollData, error) {\r\n     row := config.DB.QueryRow(\"SELECT id, title, description, expires_at, status FROM polls WHERE id = ?\", pollID)\r\n     var p PollData\r\n     if err := row.Scan(&p.ID, &p.Title, &p.Description, &p.ExpiresAt, &p.Status); err != nil {\r\n"
                },
                {
                    "date": 1747232809307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,17 +28,22 @@\n     TotalVotes int    `json:\"total_votes\"`\r\n }\r\n \r\n func FetchPollData(pollID string) (*PollData, error) {\r\n-    row := config.DB.QueryRow(\"SELECT id, title, description, expires_at, status FROM polls WHERE id = ?\", pollID)\r\n     var p PollData\r\n-    if err := row.Scan(&p.ID, &p.Title, &p.Description, &p.ExpiresAt, &p.Status); err != nil {\r\n+\r\n+    row := config.DB.QueryRow(`\r\n+        SELECT id, title, description, expires_at, status, allow_realtime_results \r\n+        FROM polls WHERE id = ?`, pollID)\r\n+\r\n+    if err := row.Scan(&p.ID, &p.Title, &p.Description, &p.ExpiresAt, &p.Status, &p.AllowRealtimeResults); err != nil {\r\n         if err == sql.ErrNoRows {\r\n             return nil, fmt.Errorf(\"poll not found\")\r\n         }\r\n         return nil, err\r\n     }\r\n \r\n+    // Ambil daftar opsi jawaban\r\n     rows, err := config.DB.Query(\"SELECT id, option_text, order_index FROM poll_options WHERE poll_id = ?\", pollID)\r\n     if err != nil {\r\n         return nil, err\r\n     }\r\n@@ -51,60 +56,20 @@\n             return nil, err\r\n         }\r\n         options = append(options, o)\r\n     }\r\n-\r\n     p.Options = options\r\n-    return &p, nil\r\n-}\n-package services\r\n \r\n-import (\r\n-    \"database/sql\"\r\n-    \"fmt\"\r\n+    // Cek apakah peserta bisa lihat hasil\r\n+    canSeeResults := p.Status == \"closed\" || p.AllowRealtimeResults\r\n \r\n-    \"backand/config\"\r\n-)\r\n-\r\n-type PollData struct {\r\n-    ID          string `json:\"id\"`\r\n-    Title       string `json:\"title\"`\r\n-    Description string `json:\"description\"`\r\n-    ExpiresAt   string `json:\"expires_at\"`\r\n-    Status      string `json:\"status\"`\r\n-    Options     []Option\r\n-}\r\n-\r\n-type Option struct {\r\n-    ID    int    `json:\"id\"`\r\n-    Text  string `json:\"text\"`\r\n-    Index int    `json:\"order_index\"`\r\n-}\r\n-\r\n-func FetchPollData(pollID string) (*PollData, error) {\r\n-    row := config.DB.QueryRow(\"SELECT id, title, description, expires_at, status FROM polls WHERE id = ?\", pollID)\r\n-    var p PollData\r\n-    if err := row.Scan(&p.ID, &p.Title, &p.Description, &p.ExpiresAt, &p.Status); err != nil {\r\n-        if err == sql.ErrNoRows {\r\n-            return nil, fmt.Errorf(\"poll not found\")\r\n-        }\r\n-        return nil, err\r\n-    }\r\n-\r\n-    rows, err := config.DB.Query(\"SELECT id, option_text, order_index FROM poll_options WHERE poll_id = ?\", pollID)\r\n-    if err != nil {\r\n-        return nil, err\r\n-    }\r\n-    defer rows.Close()\r\n-\r\n-    var options []Option\r\n-    for rows.Next() {\r\n-        var o Option\r\n-        if err := rows.Scan(&o.ID, &o.Text, &o.Index); err != nil {\r\n+    // Jika boleh â†’ ambil hasil voting\r\n+    if canSeeResults {\r\n+        results, err := ExportPollResults(p.ID)\r\n+        if err != nil {\r\n             return nil, err\r\n         }\r\n-        options = append(options, o)\r\n+        p.Results = results\r\n     }\r\n \r\n-    p.Options = options\r\n     return &p, nil\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747232866321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,13 +22,10 @@\n     Text  string `json:\"text\"`\r\n     Index int    `json:\"order_index\"`\r\n }\r\n \r\n-type PollResult struct {\r\n-    OptionText string `json:\"option_text\"`\r\n-    TotalVotes int    `json:\"total_votes\"`\r\n-}\r\n \r\n+\r\n func FetchPollData(pollID string) (*PollData, error) {\r\n     var p PollData\r\n \r\n     row := config.DB.QueryRow(`\r\n"
                },
                {
                    "date": 1747232873616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,10 +22,13 @@\n     Text  string `json:\"text\"`\r\n     Index int    `json:\"order_index\"`\r\n }\r\n \r\n+type PollResults struct {\r\n+    OptionText string `json:\"option_text\"`\r\n+    TotalVotes int    `json:\"total_votes\"`\r\n+}\r\n \r\n-\r\n func FetchPollData(pollID string) (*PollData, error) {\r\n     var p PollData\r\n \r\n     row := config.DB.QueryRow(`\r\n"
                },
                {
                    "date": 1747232898289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,13 +7,14 @@\n     \"backand/config\"\r\n )\r\n \r\n type PollData struct {\r\n-    ID          string `json:\"id\"`\r\n-    Title       string `json:\"title\"`\r\n-    Description string `json:\"description\"`\r\n-    ExpiresAt   string `json:\"expires_at\"`\r\n-    Status      string `json:\"status\"`\r\n+    ID                   string     `json:\"id\"`\r\n+    Title                string     `json:\"title\"`\r\n+    Description          string     `json:\"description\"`\r\n+    ExpiresAt            string     `json:\"expires_at\"`\r\n+    Status               string     `json:\"status\"`\r\n+    AllowRealtimeResults bool       `json:\"allow_realtime\"`\r\n     Options              []Option  `json:\"options\"`\r\n     Results              []PollResult `json:\"results,omitempty\"`\r\n }\r\n \r\n"
                },
                {
                    "date": 1747232913745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,13 +23,10 @@\n     Text  string `json:\"text\"`\r\n     Index int    `json:\"order_index\"`\r\n }\r\n \r\n-type PollResults struct {\r\n-    OptionText string `json:\"option_text\"`\r\n-    TotalVotes int    `json:\"total_votes\"`\r\n-}\r\n \r\n+\r\n func FetchPollData(pollID string) (*PollData, error) {\r\n     var p PollData\r\n \r\n     row := config.DB.QueryRow(`\r\n"
                },
                {
                    "date": 1747232957843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,10 +23,13 @@\n     Text  string `json:\"text\"`\r\n     Index int    `json:\"order_index\"`\r\n }\r\n \r\n+type PollResults struct {\r\n+    OptionText string `json:\"option_text\"`\r\n+    TotalVotes int    `json:\"total_votes\"`\r\n+}\r\n \r\n-\r\n func FetchPollData(pollID string) (*PollData, error) {\r\n     var p PollData\r\n \r\n     row := config.DB.QueryRow(`\r\n"
                },
                {
                    "date": 1747234177980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n     Text  string `json:\"text\"`\r\n     Index int    `json:\"order_index\"`\r\n }\r\n \r\n-type PollResults struct {\r\n+type PollResult struct {\r\n     OptionText string `json:\"option_text\"`\r\n     TotalVotes int    `json:\"total_votes\"`\r\n }\r\n \r\n@@ -42,9 +42,9 @@\n         }\r\n         return nil, err\r\n     }\r\n \r\n-    // Ambil daftar opsi jawaban\r\n+    // Ambil opsi jawaban\r\n     rows, err := config.DB.Query(\"SELECT id, option_text, order_index FROM poll_options WHERE poll_id = ?\", pollID)\r\n     if err != nil {\r\n         return nil, err\r\n     }\r\n@@ -62,11 +62,11 @@\n \r\n     // Cek apakah peserta bisa lihat hasil\r\n     canSeeResults := p.Status == \"closed\" || p.AllowRealtimeResults\r\n \r\n-    // Jika boleh â†’ ambil hasil voting\r\n+    // Jika boleh lihat hasil â†’ ambil jumlah suara per opsi\r\n     if canSeeResults {\r\n-        results, err := ExportPollResults(p.ID)\r\n+        results, err := ExportPollResults(pollID)\r\n         if err != nil {\r\n             return nil, err\r\n         }\r\n         p.Results = results\r\n"
                },
                {
                    "date": 1747235704251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,74 +3,42 @@\n import (\r\n     \"database/sql\"\r\n     \"fmt\"\r\n \r\n-    \"backand/config\"\r\n+    \"backand/models\"\r\n )\r\n \r\n-type PollData struct {\r\n-    ID                   string     `json:\"id\"`\r\n-    Title                string     `json:\"title\"`\r\n-    Description          string     `json:\"description\"`\r\n-    ExpiresAt            string     `json:\"expires_at\"`\r\n-    Status               string     `json:\"status\"`\r\n-    AllowRealtimeResults bool       `json:\"allow_realtime\"`\r\n-    Options              []Option  `json:\"options\"`\r\n-    Results              []PollResult `json:\"results,omitempty\"`\r\n-}\r\n-\r\n-type Option struct {\r\n-    ID    int    `json:\"id\"`\r\n-    Text  string `json:\"text\"`\r\n-    Index int    `json:\"order_index\"`\r\n-}\r\n-\r\n-type PollResult struct {\r\n-    OptionText string `json:\"option_text\"`\r\n-    TotalVotes int    `json:\"total_votes\"`\r\n-}\r\n-\r\n-func FetchPollData(pollID string) (*PollData, error) {\r\n-    var p PollData\r\n-\r\n+func FetchPollData(pollID string) (*models.PollDetails, error) {\r\n     row := config.DB.QueryRow(`\r\n         SELECT id, title, description, expires_at, status, allow_realtime_results \r\n         FROM polls WHERE id = ?`, pollID)\r\n \r\n+    var p models.Poll\r\n     if err := row.Scan(&p.ID, &p.Title, &p.Description, &p.ExpiresAt, &p.Status, &p.AllowRealtimeResults); err != nil {\r\n         if err == sql.ErrNoRows {\r\n             return nil, fmt.Errorf(\"poll not found\")\r\n         }\r\n         return nil, err\r\n     }\r\n \r\n-    // Ambil opsi jawaban\r\n     rows, err := config.DB.Query(\"SELECT id, option_text, order_index FROM poll_options WHERE poll_id = ?\", pollID)\r\n     if err != nil {\r\n         return nil, err\r\n     }\r\n     defer rows.Close()\r\n \r\n-    var options []Option\r\n+    var options []models.PollOption\r\n     for rows.Next() {\r\n-        var o Option\r\n-        if err := rows.Scan(&o.ID, &o.Text, &o.Index); err != nil {\r\n+        var o models.PollOption\r\n+        if err := rows.Scan(&o.ID, &o.Text, &o.Order); err != nil {\r\n             return nil, err\r\n         }\r\n         options = append(options, o)\r\n     }\r\n-    p.Options = options\r\n \r\n-    // Cek apakah peserta bisa lihat hasil\r\n-    canSeeResults := p.Status == \"closed\" || p.AllowRealtimeResults\r\n-\r\n-    // Jika boleh lihat hasil â†’ ambil jumlah suara per opsi\r\n-    if canSeeResults {\r\n-        results, err := ExportPollResults(pollID)\r\n-        if err != nil {\r\n-            return nil, err\r\n-        }\r\n-        p.Results = results\r\n+    pollDetails := &models.PollDetails{\r\n+        Poll:    p,\r\n+        Options: options,\r\n     }\r\n \r\n-    return &p, nil\r\n+    return pollDetails, nil\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747235740584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n     \"database/sql\"\r\n     \"fmt\"\r\n \r\n     \"backand/models\"\r\n+\t\"backand/config\"\r\n )\r\n \r\n func FetchPollData(pollID string) (*models.PollDetails, error) {\r\n     row := config.DB.QueryRow(`\r\n"
                },
                {
                    "date": 1747236101965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,13 @@\n-package services\r\n+func FetchPollData(pollID string) (*PollDetails, error) {\r\n+    var p PollDetails\r\n \r\n-import (\r\n-    \"database/sql\"\r\n-    \"fmt\"\r\n-\r\n-    \"backand/models\"\r\n-\t\"backand/config\"\r\n-)\r\n-\r\n-func FetchPollData(pollID string) (*models.PollDetails, error) {\r\n     row := config.DB.QueryRow(`\r\n         SELECT id, title, description, expires_at, status, allow_realtime_results \r\n         FROM polls WHERE id = ?`, pollID)\r\n \r\n-    var p models.Poll\r\n-    if err := row.Scan(&p.ID, &p.Title, &p.Description, &p.ExpiresAt, &p.Status, &p.AllowRealtimeResults); err != nil {\r\n+    if err := row.Scan(&p.Poll.ID, &p.Poll.Title, &p.Poll.Description,\r\n+        &p.Poll.ExpiresAt, &p.Poll.Status, &p.Poll.AllowRealtimeResults); err != nil {\r\n         if err == sql.ErrNoRows {\r\n             return nil, fmt.Errorf(\"poll not found\")\r\n         }\r\n         return nil, err\r\n@@ -26,20 +18,23 @@\n         return nil, err\r\n     }\r\n     defer rows.Close()\r\n \r\n-    var options []models.PollOption\r\n     for rows.Next() {\r\n-        var o models.PollOption\r\n+        var o PollOption\r\n         if err := rows.Scan(&o.ID, &o.Text, &o.Order); err != nil {\r\n             return nil, err\r\n         }\r\n-        options = append(options, o)\r\n+        p.Options = append(p.Options, o)\r\n     }\r\n \r\n-    pollDetails := &models.PollDetails{\r\n-        Poll:    p,\r\n-        Options: options,\r\n+    canSeeResults := p.Poll.Status == \"closed\" || p.Poll.AllowRealtimeResults\r\n+    if canSeeResults {\r\n+        results, err := ExportPollResults(p.Poll.ID)\r\n+        if err != nil {\r\n+            return nil, err\r\n+        }\r\n+        p.Results = results\r\n     }\r\n \r\n-    return pollDetails, nil\r\n+    return &p, nil\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747236114389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,21 @@\n-func FetchPollData(pollID string) (*PollDetails, error) {\r\n-    var p PollDetails\r\n+package services\r\n \r\n+import (\r\n+    \"database/sql\"\r\n+    \"fmt\"\r\n+\r\n+    \"backand/models\"\r\n+\t\"backand/config\"\r\n+)\r\n+\r\n+func FetchPollData(pollID string) (*models.PollDetails, error) {\r\n     row := config.DB.QueryRow(`\r\n         SELECT id, title, description, expires_at, status, allow_realtime_results \r\n         FROM polls WHERE id = ?`, pollID)\r\n \r\n-    if err := row.Scan(&p.Poll.ID, &p.Poll.Title, &p.Poll.Description,\r\n-        &p.Poll.ExpiresAt, &p.Poll.Status, &p.Poll.AllowRealtimeResults); err != nil {\r\n+    var p models.Poll\r\n+    if err := row.Scan(&p.ID, &p.Title, &p.Description, &p.ExpiresAt, &p.Status, &p.AllowRealtimeResults); err != nil {\r\n         if err == sql.ErrNoRows {\r\n             return nil, fmt.Errorf(\"poll not found\")\r\n         }\r\n         return nil, err\r\n@@ -18,23 +26,20 @@\n         return nil, err\r\n     }\r\n     defer rows.Close()\r\n \r\n+    var options []models.PollOption\r\n     for rows.Next() {\r\n-        var o PollOption\r\n+        var o models.PollOption\r\n         if err := rows.Scan(&o.ID, &o.Text, &o.Order); err != nil {\r\n             return nil, err\r\n         }\r\n-        p.Options = append(p.Options, o)\r\n+        options = append(options, o)\r\n     }\r\n \r\n-    canSeeResults := p.Poll.Status == \"closed\" || p.Poll.AllowRealtimeResults\r\n-    if canSeeResults {\r\n-        results, err := ExportPollResults(p.Poll.ID)\r\n-        if err != nil {\r\n-            return nil, err\r\n-        }\r\n-        p.Results = results\r\n+    pollDetails := &models.PollDetails{\r\n+        Poll:    p,\r\n+        Options: options,\r\n     }\r\n \r\n-    return &p, nil\r\n+    return pollDetails, nil\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747236121368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,39 +7,28 @@\n     \"backand/models\"\r\n \t\"backand/config\"\r\n )\r\n \r\n-func FetchPollData(pollID string) (*models.PollDetails, error) {\r\n-    row := config.DB.QueryRow(`\r\n-        SELECT id, title, description, expires_at, status, allow_realtime_results \r\n-        FROM polls WHERE id = ?`, pollID)\r\n+func ExportPollResults(pollID string) ([]PollResult, error) {\r\n+    rows, err := config.DB.Query(`\r\n+        SELECT po.option_text, COUNT(v.id) AS total_votes\r\n+        FROM poll_options po\r\n+        LEFT JOIN votes v ON po.id = v.option_id\r\n+        WHERE po.poll_id = ?\r\n+        GROUP BY po.id`, pollID)\r\n \r\n-    var p models.Poll\r\n-    if err := row.Scan(&p.ID, &p.Title, &p.Description, &p.ExpiresAt, &p.Status, &p.AllowRealtimeResults); err != nil {\r\n-        if err == sql.ErrNoRows {\r\n-            return nil, fmt.Errorf(\"poll not found\")\r\n-        }\r\n-        return nil, err\r\n-    }\r\n-\r\n-    rows, err := config.DB.Query(\"SELECT id, option_text, order_index FROM poll_options WHERE poll_id = ?\", pollID)\r\n     if err != nil {\r\n         return nil, err\r\n     }\r\n     defer rows.Close()\r\n \r\n-    var options []models.PollOption\r\n+    var results []PollResult\r\n     for rows.Next() {\r\n-        var o models.PollOption\r\n-        if err := rows.Scan(&o.ID, &o.Text, &o.Order); err != nil {\r\n+        var res PollResult\r\n+        if err := rows.Scan(&res.OptionText, &res.TotalVotes); err != nil {\r\n             return nil, err\r\n         }\r\n-        options = append(options, o)\r\n+        results = append(results, res)\r\n     }\r\n \r\n-    pollDetails := &models.PollDetails{\r\n-        Poll:    p,\r\n-        Options: options,\r\n-    }\r\n-\r\n-    return pollDetails, nil\r\n+    return results, nil\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747236134683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,28 +7,44 @@\n     \"backand/models\"\r\n \t\"backand/config\"\r\n )\r\n \r\n-func ExportPollResults(pollID string) ([]PollResult, error) {\r\n-    rows, err := config.DB.Query(`\r\n-        SELECT po.option_text, COUNT(v.id) AS total_votes\r\n-        FROM poll_options po\r\n-        LEFT JOIN votes v ON po.id = v.option_id\r\n-        WHERE po.poll_id = ?\r\n-        GROUP BY po.id`, pollID)\r\n+func FetchPollData(pollID string) (*PollDetails, error) {\r\n+    var p PollDetails\r\n \r\n+    row := config.DB.QueryRow(`\r\n+        SELECT id, title, description, expires_at, status, allow_realtime_results \r\n+        FROM polls WHERE id = ?`, pollID)\r\n+\r\n+    if err := row.Scan(&p.Poll.ID, &p.Poll.Title, &p.Poll.Description,\r\n+        &p.Poll.ExpiresAt, &p.Poll.Status, &p.Poll.AllowRealtimeResults); err != nil {\r\n+        if err == sql.ErrNoRows {\r\n+            return nil, fmt.Errorf(\"poll not found\")\r\n+        }\r\n+        return nil, err\r\n+    }\r\n+\r\n+    rows, err := config.DB.Query(\"SELECT id, option_text, order_index FROM poll_options WHERE poll_id = ?\", pollID)\r\n     if err != nil {\r\n         return nil, err\r\n     }\r\n     defer rows.Close()\r\n \r\n-    var results []PollResult\r\n     for rows.Next() {\r\n-        var res PollResult\r\n-        if err := rows.Scan(&res.OptionText, &res.TotalVotes); err != nil {\r\n+        var o PollOption\r\n+        if err := rows.Scan(&o.ID, &o.Text, &o.Order); err != nil {\r\n             return nil, err\r\n         }\r\n-        results = append(results, res)\r\n+        p.Options = append(p.Options, o)\r\n     }\r\n \r\n-    return results, nil\r\n+    canSeeResults := p.Poll.Status == \"closed\" || p.Poll.AllowRealtimeResults\r\n+    if canSeeResults {\r\n+        results, err := ExportPollResults(p.Poll.ID)\r\n+        if err != nil {\r\n+            return nil, err\r\n+        }\r\n+        p.Results = results\r\n+    }\r\n+\r\n+    return &p, nil\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747236249441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import (\r\n     \"database/sql\"\r\n     \"fmt\"\r\n \r\n-    \"backand/models\"\r\n+    \"backand/model\"\r\n \t\"backand/config\"\r\n )\r\n \r\n func FetchPollData(pollID string) (*PollDetails, error) {\r\n"
                },
                {
                    "date": 1747236287472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \t\"backand/config\"\r\n )\r\n \r\n func FetchPollData(pollID string) (*PollDetails, error) {\r\n-    var p PollDetails\r\n+    var p PollDetail\r\n \r\n     row := config.DB.QueryRow(`\r\n         SELECT id, title, description, expires_at, status, allow_realtime_results \r\n         FROM polls WHERE id = ?`, pollID)\r\n"
                },
                {
                    "date": 1747236300096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,14 +3,14 @@\n import (\r\n     \"database/sql\"\r\n     \"fmt\"\r\n \r\n-    \"backand/model\"\r\n+    \"backand/models\"\r\n \t\"backand/config\"\r\n )\r\n \r\n func FetchPollData(pollID string) (*PollDetails, error) {\r\n-    var p PollDetail\r\n+    var p PollDetails\r\n \r\n     row := config.DB.QueryRow(`\r\n         SELECT id, title, description, expires_at, status, allow_realtime_results \r\n         FROM polls WHERE id = ?`, pollID)\r\n"
                },
                {
                    "date": 1747236686305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,20 +4,17 @@\n     \"database/sql\"\r\n     \"fmt\"\r\n \r\n     \"backand/models\"\r\n-\t\"backand/config\"\r\n )\r\n \r\n-func FetchPollData(pollID string) (*PollDetails, error) {\r\n-    var p PollDetails\r\n-\r\n+func FetchPollData(pollID string) (*models.PollDetails, error) {\r\n     row := config.DB.QueryRow(`\r\n         SELECT id, title, description, expires_at, status, allow_realtime_results \r\n         FROM polls WHERE id = ?`, pollID)\r\n \r\n-    if err := row.Scan(&p.Poll.ID, &p.Poll.Title, &p.Poll.Description,\r\n-        &p.Poll.ExpiresAt, &p.Poll.Status, &p.Poll.AllowRealtimeResults); err != nil {\r\n+    var p models.Poll\r\n+    if err := row.Scan(&p.ID, &p.Title, &p.Description, &p.ExpiresAt, &p.Status, &p.AllowRealtimeResults); err != nil {\r\n         if err == sql.ErrNoRows {\r\n             return nil, fmt.Errorf(\"poll not found\")\r\n         }\r\n         return nil, err\r\n@@ -28,23 +25,20 @@\n         return nil, err\r\n     }\r\n     defer rows.Close()\r\n \r\n+    var options []models.PollOption\r\n     for rows.Next() {\r\n-        var o PollOption\r\n+        var o models.PollOption\r\n         if err := rows.Scan(&o.ID, &o.Text, &o.Order); err != nil {\r\n             return nil, err\r\n         }\r\n-        p.Options = append(p.Options, o)\r\n+        options = append(options, o)\r\n     }\r\n \r\n-    canSeeResults := p.Poll.Status == \"closed\" || p.Poll.AllowRealtimeResults\r\n-    if canSeeResults {\r\n-        results, err := ExportPollResults(p.Poll.ID)\r\n-        if err != nil {\r\n-            return nil, err\r\n-        }\r\n-        p.Results = results\r\n+    pollDetails := &models.PollDetails{\r\n+        Poll:    p,\r\n+        Options: options,\r\n     }\r\n \r\n-    return &p, nil\r\n+    return pollDetails, nil\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747237880070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,18 +3,30 @@\n import (\r\n     \"database/sql\"\r\n     \"fmt\"\r\n \r\n-    \"backand/models\"\r\n+    \"backand/config\"\r\n )\r\n \r\n-func FetchPollData(pollID string) (*models.PollDetails, error) {\r\n-    row := config.DB.QueryRow(`\r\n-        SELECT id, title, description, expires_at, status, allow_realtime_results \r\n-        FROM polls WHERE id = ?`, pollID)\r\n+type PollData struct {\r\n+    ID          string `json:\"id\"`\r\n+    Title       string `json:\"title\"`\r\n+    Description string `json:\"description\"`\r\n+    ExpiresAt   string `json:\"expires_at\"`\r\n+    Status      string `json:\"status\"`\r\n+    Options     []Option\r\n+}\r\n \r\n-    var p models.Poll\r\n-    if err := row.Scan(&p.ID, &p.Title, &p.Description, &p.ExpiresAt, &p.Status, &p.AllowRealtimeResults); err != nil {\r\n+type Option struct {\r\n+    ID    int    `json:\"id\"`\r\n+    Text  string `json:\"text\"`\r\n+    Index int    `json:\"order_index\"`\r\n+}\r\n+\r\n+func FetchPollData(pollID string) (*PollData, error) {\r\n+    row := config.DB.QueryRow(\"SELECT id, title, description, expires_at, status FROM polls WHERE id = ?\", pollID)\r\n+    var p PollData\r\n+    if err := row.Scan(&p.ID, &p.Title, &p.Description, &p.ExpiresAt, &p.Status); err != nil {\r\n         if err == sql.ErrNoRows {\r\n             return nil, fmt.Errorf(\"poll not found\")\r\n         }\r\n         return nil, err\r\n@@ -25,20 +37,16 @@\n         return nil, err\r\n     }\r\n     defer rows.Close()\r\n \r\n-    var options []models.PollOption\r\n+    var options []Option\r\n     for rows.Next() {\r\n-        var o models.PollOption\r\n-        if err := rows.Scan(&o.ID, &o.Text, &o.Order); err != nil {\r\n+        var o Option\r\n+        if err := rows.Scan(&o.ID, &o.Text, &o.Index); err != nil {\r\n             return nil, err\r\n         }\r\n         options = append(options, o)\r\n     }\r\n \r\n-    pollDetails := &models.PollDetails{\r\n-        Poll:    p,\r\n-        Options: options,\r\n-    }\r\n\\ No newline at end of file\n-\r\n-    return pollDetails, nil\r\n-}\n+    p.Options = options\r\n+    return &p, nil\r\n+}\r\n"
                },
                {
                    "date": 1747238407737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,30 +3,19 @@\n import (\r\n     \"database/sql\"\r\n     \"fmt\"\r\n \r\n-    \"backand/config\"\r\n+    \"backand/models\"\r\n+\t\"backand/config\"\r\n )\r\n \r\n-type PollData struct {\r\n-    ID          string `json:\"id\"`\r\n-    Title       string `json:\"title\"`\r\n-    Description string `json:\"description\"`\r\n-    ExpiresAt   string `json:\"expires_at\"`\r\n-    Status      string `json:\"status\"`\r\n-    Options     []Option\r\n-}\r\n+func FetchPollData(pollID string) (*models.PollDetails, error) {\r\n+    row := config.DB.QueryRow(`\r\n+        SELECT id, title, description, expires_at, status, allow_realtime_results \r\n+        FROM polls WHERE id = ?`, pollID)\r\n \r\n-type Option struct {\r\n-    ID    int    `json:\"id\"`\r\n-    Text  string `json:\"text\"`\r\n-    Index int    `json:\"order_index\"`\r\n-}\r\n-\r\n-func FetchPollData(pollID string) (*PollData, error) {\r\n-    row := config.DB.QueryRow(\"SELECT id, title, description, expires_at, status FROM polls WHERE id = ?\", pollID)\r\n-    var p PollData\r\n-    if err := row.Scan(&p.ID, &p.Title, &p.Description, &p.ExpiresAt, &p.Status); err != nil {\r\n+    var p models.Poll\r\n+    if err := row.Scan(&p.ID, &p.Title, &p.Description, &p.ExpiresAt, &p.Status, &p.AllowRealtimeResults); err != nil {\r\n         if err == sql.ErrNoRows {\r\n             return nil, fmt.Errorf(\"poll not found\")\r\n         }\r\n         return nil, err\r\n@@ -37,16 +26,20 @@\n         return nil, err\r\n     }\r\n     defer rows.Close()\r\n \r\n-    var options []Option\r\n+    var options []models.PollOption\r\n     for rows.Next() {\r\n-        var o Option\r\n-        if err := rows.Scan(&o.ID, &o.Text, &o.Index); err != nil {\r\n+        var o models.PollOption\r\n+        if err := rows.Scan(&o.ID, &o.Text, &o.Order); err != nil {\r\n             return nil, err\r\n         }\r\n         options = append(options, o)\r\n     }\r\n \r\n-    p.Options = options\r\n-    return &p, nil\r\n-}\r\n+    pollDetails := &models.PollDetails{\r\n+        Poll:    p,\r\n+        Options: options,\r\n+    }\r\n+\r\n+    return pollDetails, nil\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747238976944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,13 +3,12 @@\n import (\r\n     \"database/sql\"\r\n     \"fmt\"\r\n \r\n-    \"backand/models\"\r\n-\t\"backand/config\"\r\n+    \"backand/config\"\r\n )\r\n \r\n-func FetchPollData(pollID string) (*models.PollDetails, error) {\r\n+func FetchPollData(pollID string) (*models.Poll, error) {\r\n     row := config.DB.QueryRow(`\r\n         SELECT id, title, description, expires_at, status, allow_realtime_results \r\n         FROM polls WHERE id = ?`, pollID)\r\n \r\n@@ -20,26 +19,6 @@\n         }\r\n         return nil, err\r\n     }\r\n \r\n-    rows, err := config.DB.Query(\"SELECT id, option_text, order_index FROM poll_options WHERE poll_id = ?\", pollID)\r\n-    if err != nil {\r\n-        return nil, err\r\n-    }\r\n-    defer rows.Close()\r\n-\r\n-    var options []models.PollOption\r\n-    for rows.Next() {\r\n-        var o models.PollOption\r\n-        if err := rows.Scan(&o.ID, &o.Text, &o.Order); err != nil {\r\n-            return nil, err\r\n-        }\r\n-        options = append(options, o)\r\n-    }\r\n-\r\n-    pollDetails := &models.PollDetails{\r\n-        Poll:    p,\r\n-        Options: options,\r\n-    }\r\n-\r\n-    return pollDetails, nil\r\n+    return &p, nil\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747238986981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n     \"database/sql\"\r\n     \"fmt\"\r\n \r\n     \"backand/config\"\r\n+    \"backand/models\"\r\n )\r\n \r\n func FetchPollData(pollID string) (*models.Poll, error) {\r\n     row := config.DB.QueryRow(`\r\n"
                },
                {
                    "date": 1747239191379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,24 +1,36 @@\n package services\r\n \r\n import (\r\n-    \"database/sql\"\r\n-    \"fmt\"\r\n-\r\n-    \"backand/config\"\r\n     \"backand/models\"\r\n )\r\n \r\n-func FetchPollData(pollID string) (*models.Poll, error) {\r\n+func FetchPollOptions(pollID string) ([]models.PollOption, error) {\r\n+    rows, err := config.DB.Query(\"SELECT id, option_text, order_index FROM poll_options WHERE poll_id = ?\", pollID)\r\n+    if err != nil {\r\n+        return nil, err\r\n+    }\r\n+    defer rows.Close()\r\n+\r\n+    var options []models.PollOption\r\n+    for rows.Next() {\r\n+        var o models.PollOption\r\n+        if err := rows.Scan(&o.ID, &o.Text, &o.Order); err != nil {\r\n+            return nil, err\r\n+        }\r\n+        options = append(options, o)\r\n+    }\r\n+\r\n+    return options, nil\r\n+}\r\n+\r\n+func GetPollDetails(pollID string) (*models.Poll, error) {\r\n     row := config.DB.QueryRow(`\r\n         SELECT id, title, description, expires_at, status, allow_realtime_results \r\n         FROM polls WHERE id = ?`, pollID)\r\n \r\n     var p models.Poll\r\n     if err := row.Scan(&p.ID, &p.Title, &p.Description, &p.ExpiresAt, &p.Status, &p.AllowRealtimeResults); err != nil {\r\n-        if err == sql.ErrNoRows {\r\n-            return nil, fmt.Errorf(\"poll not found\")\r\n-        }\r\n         return nil, err\r\n     }\r\n \r\n     return &p, nil\r\n"
                },
                {
                    "date": 1747239211458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,36 @@\n package services\r\n \r\n import (\r\n+    \"database/sql\"\r\n+    \"fmt\"\r\n+\r\n+    \"backand/config\"\r\n     \"backand/models\"\r\n )\r\n \r\n+func FetchPollData(pollID string) (*models.Poll, error) {\r\n+    row := config.DB.QueryRow(`\r\n+        SELECT id, title, description, expires_at, status, allow_realtime_results \r\n+        FROM polls WHERE id = ?`, pollID)\r\n+\r\n+    var p models.Poll\r\n+    if err := row.Scan(&p.ID, &p.Title, &p.Description, &p.ExpiresAt, &p.Status, &p.AllowRealtimeResults); err != nil {\r\n+        if err == sql.ErrNoRows {\r\n+            return nil, fmt.Errorf(\"poll not found\")\r\n+        }\r\n+        return nil, err\r\n+    }\r\n+\r\n+    return &p, nil\r\n+}\r\n+\r\n+package services\r\n+\r\n+import (\r\n+    \"backand/models\"\r\n+)\r\n+\r\n func FetchPollOptions(pollID string) ([]models.PollOption, error) {\r\n     rows, err := config.DB.Query(\"SELECT id, option_text, order_index FROM poll_options WHERE poll_id = ?\", pollID)\r\n     if err != nil {\r\n         return nil, err\r\n"
                },
                {
                    "date": 1747239216548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,10 +23,10 @@\n \r\n     return &p, nil\r\n }\r\n \r\n-package services\r\n \r\n+\r\n import (\r\n     \"backand/models\"\r\n )\r\n \r\n"
                },
                {
                    "date": 1747239222440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,14 +23,8 @@\n \r\n     return &p, nil\r\n }\r\n \r\n-\r\n-\r\n-import (\r\n-    \"backand/models\"\r\n-)\r\n-\r\n func FetchPollOptions(pollID string) ([]models.PollOption, error) {\r\n     rows, err := config.DB.Query(\"SELECT id, option_text, order_index FROM poll_options WHERE poll_id = ?\", pollID)\r\n     if err != nil {\r\n         return nil, err\r\n"
                },
                {
                    "date": 1747239249800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,10 @@\n \r\n     return &p, nil\r\n }\r\n \r\n+\r\n+\r\n func FetchPollOptions(pollID string) ([]models.PollOption, error) {\r\n     rows, err := config.DB.Query(\"SELECT id, option_text, order_index FROM poll_options WHERE poll_id = ?\", pollID)\r\n     if err != nil {\r\n         return nil, err\r\n"
                },
                {
                    "date": 1747239289140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,57 @@\n+package services\r\n+\r\n+import (\r\n+    \"database/sql\"\r\n+    \"fmt\"\r\n+\r\n+    \"backand/config\"\r\n+    \"backand/models\"\r\n+)\r\n+\r\n+func FetchPollData(pollID string) (*models.Poll, error) {\r\n+    row := config.DB.QueryRow(`\r\n+        SELECT id, title, description, expires_at, status, allow_realtime_results \r\n+        FROM polls WHERE id = ?`, pollID)\r\n+\r\n+    var p models.Poll\r\n+    if err := row.Scan(&p.ID, &p.Title, &p.Description, &p.ExpiresAt, &p.Status, &p.AllowRealtimeResults); err != nil {\r\n+        if err == sql.ErrNoRows {\r\n+            return nil, fmt.Errorf(\"poll not found\")\r\n+        }\r\n+        return nil, err\r\n+    }\r\n+\r\n+    return &p, nil\r\n+}\r\n+\r\n+func FetchPollOptions(pollID string) ([]models.PollOption, error) {\r\n+    rows, err := config.DB.Query(\"SELECT id, option_text, order_index FROM poll_options WHERE poll_id = ?\", pollID)\r\n+    if err != nil {\r\n+        return nil, err\r\n+    }\r\n+    defer rows.Close()\r\n+\r\n+    var options []models.PollOption\r\n+    for rows.Next() {\r\n+        var o models.PollOption\r\n+        if err := rows.Scan(&o.ID, &o.Text, &o.Order); err != nil {\r\n+            return nil, err\r\n+        }\r\n+        options = append(options, o)\r\n+    }\r\n+\r\n+    return options, nil\r\n+}\r\n+\r\n+func GetPollDetail(pollID string) (*models.Poll, error) {\r\n+    row := config.DB.QueryRow(`\r\n+        SELECT id, title, description, expires_at, status, allow_realtime_results \r\n+        FROM polls WHERE id = ?`, pollID)\r\n+\r\n+    var p models.Poll\r\n+    if err := row.Scan(&p.ID, &p.Title, &p.Description, &p.ExpiresAt, &p.Status, &p.AllowRealtimeResults); err != nil {\r\n+        return nil, err\r\n+    }\r\n+\r\n+    return &p, nil\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747239347711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,43 @@\n+package services\r\n+\r\n+import (\r\n+    \"database/sql\"\r\n+    \"fmt\"\r\n+\r\n+    \"backand/config\"\r\n+    \"backand/models\"\r\n+)\r\n+\r\n+\r\n+\r\n+func FetchPollOptions(pollID string) ([]models.PollOption, error) {\r\n+    rows, err := config.DB.Query(\"SELECT id, option_text, order_index FROM poll_options WHERE poll_id = ?\", pollID)\r\n+    if err != nil {\r\n+        return nil, err\r\n+    }\r\n+    defer rows.Close()\r\n+\r\n+    var options []models.PollOption\r\n+    for rows.Next() {\r\n+        var o models.PollOption\r\n+        if err := rows.Scan(&o.ID, &o.Text, &o.Order); err != nil {\r\n+            return nil, err\r\n+        }\r\n+        options = append(options, o)\r\n+    }\r\n+\r\n+    return options, nil\r\n+}\r\n+\r\n+func GetPollDetail(pollID string) (*models.Poll, error) {\r\n+    row := config.DB.QueryRow(`\r\n+        SELECT id, title, description, expires_at, status, allow_realtime_results \r\n+        FROM polls WHERE id = ?`, pollID)\r\n+\r\n+    var p models.Poll\r\n+    if err := row.Scan(&p.ID, &p.Title, &p.Description, &p.ExpiresAt, &p.Status, &p.AllowRealtimeResults); err != nil {\r\n+        return nil, err\r\n+    }\r\n+\r\n+    return &p, nil\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747239364409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,51 +7,8 @@\n     \"backand/config\"\r\n     \"backand/models\"\r\n )\r\n \r\n-\r\n-\r\n-func FetchPollOptions(pollID string) ([]models.PollOption, error) {\r\n-    rows, err := config.DB.Query(\"SELECT id, option_text, order_index FROM poll_options WHERE poll_id = ?\", pollID)\r\n-    if err != nil {\r\n-        return nil, err\r\n-    }\r\n-    defer rows.Close()\r\n-\r\n-    var options []models.PollOption\r\n-    for rows.Next() {\r\n-        var o models.PollOption\r\n-        if err := rows.Scan(&o.ID, &o.Text, &o.Order); err != nil {\r\n-            return nil, err\r\n-        }\r\n-        options = append(options, o)\r\n-    }\r\n-\r\n-    return options, nil\r\n-}\r\n-\r\n-func GetPollDetail(pollID string) (*models.Poll, error) {\r\n-    row := config.DB.QueryRow(`\r\n-        SELECT id, title, description, expires_at, status, allow_realtime_results \r\n-        FROM polls WHERE id = ?`, pollID)\r\n-\r\n-    var p models.Poll\r\n-    if err := row.Scan(&p.ID, &p.Title, &p.Description, &p.ExpiresAt, &p.Status, &p.AllowRealtimeResults); err != nil {\r\n-        return nil, err\r\n-    }\r\n-\r\n-    return &p, nil\r\n-}\n-package services\r\n-\r\n-import (\r\n-    \"database/sql\"\r\n-    \"fmt\"\r\n-\r\n-    \"backand/config\"\r\n-    \"backand/models\"\r\n-)\r\n-\r\n func FetchPollData(pollID string) (*models.Poll, error) {\r\n     row := config.DB.QueryRow(`\r\n         SELECT id, title, description, expires_at, status, allow_realtime_results \r\n         FROM polls WHERE id = ?`, pollID)\r\n@@ -96,64 +53,5 @@\n         return nil, err\r\n     }\r\n \r\n     return &p, nil\r\n-}\n-package services\r\n-\r\n-import (\r\n-    \"database/sql\"\r\n-    \"fmt\"\r\n-\r\n-    \"backand/config\"\r\n-    \"backand/models\"\r\n-)\r\n-\r\n-func FetchPollData(pollID string) (*models.Poll, error) {\r\n-    row := config.DB.QueryRow(`\r\n-        SELECT id, title, description, expires_at, status, allow_realtime_results \r\n-        FROM polls WHERE id = ?`, pollID)\r\n-\r\n-    var p models.Poll\r\n-    if err := row.Scan(&p.ID, &p.Title, &p.Description, &p.ExpiresAt, &p.Status, &p.AllowRealtimeResults); err != nil {\r\n-        if err == sql.ErrNoRows {\r\n-            return nil, fmt.Errorf(\"poll not found\")\r\n-        }\r\n-        return nil, err\r\n-    }\r\n-\r\n-    return &p, nil\r\n-}\r\n-\r\n-\r\n-\r\n-func FetchPollOptions(pollID string) ([]models.PollOption, error) {\r\n-    rows, err := config.DB.Query(\"SELECT id, option_text, order_index FROM poll_options WHERE poll_id = ?\", pollID)\r\n-    if err != nil {\r\n-        return nil, err\r\n-    }\r\n-    defer rows.Close()\r\n-\r\n-    var options []models.PollOption\r\n-    for rows.Next() {\r\n-        var o models.PollOption\r\n-        if err := rows.Scan(&o.ID, &o.Text, &o.Order); err != nil {\r\n-            return nil, err\r\n-        }\r\n-        options = append(options, o)\r\n-    }\r\n-\r\n-    return options, nil\r\n-}\r\n-\r\n-func GetPollDetails(pollID string) (*models.Poll, error) {\r\n-    row := config.DB.QueryRow(`\r\n-        SELECT id, title, description, expires_at, status, allow_realtime_results \r\n-        FROM polls WHERE id = ?`, pollID)\r\n-\r\n-    var p models.Poll\r\n-    if err := row.Scan(&p.ID, &p.Title, &p.Description, &p.ExpiresAt, &p.Status, &p.AllowRealtimeResults); err != nil {\r\n-        return nil, err\r\n-    }\r\n-\r\n-    return &p, nil\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747240130086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,55 +1,16 @@\n package services\r\n \r\n import (\r\n-    \"database/sql\"\r\n-    \"fmt\"\r\n-\r\n-    \"backand/config\"\r\n     \"backand/models\"\r\n )\r\n \r\n func FetchPollData(pollID string) (*models.Poll, error) {\r\n-    row := config.DB.QueryRow(`\r\n-        SELECT id, title, description, expires_at, status, allow_realtime_results \r\n-        FROM polls WHERE id = ?`, pollID)\r\n-\r\n     var p models.Poll\r\n-    if err := row.Scan(&p.ID, &p.Title, &p.Description, &p.ExpiresAt, &p.Status, &p.AllowRealtimeResults); err != nil {\r\n-        if err == sql.ErrNoRows {\r\n-            return nil, fmt.Errorf(\"poll not found\")\r\n-        }\r\n-        return nil, err\r\n-    }\r\n-\r\n-    return &p, nil\r\n-}\r\n-\r\n-func FetchPollOptions(pollID string) ([]models.PollOption, error) {\r\n-    rows, err := config.DB.Query(\"SELECT id, option_text, order_index FROM poll_options WHERE poll_id = ?\", pollID)\r\n-    if err != nil {\r\n-        return nil, err\r\n-    }\r\n-    defer rows.Close()\r\n-\r\n-    var options []models.PollOption\r\n-    for rows.Next() {\r\n-        var o models.PollOption\r\n-        if err := rows.Scan(&o.ID, &o.Text, &o.Order); err != nil {\r\n-            return nil, err\r\n-        }\r\n-        options = append(options, o)\r\n-    }\r\n-\r\n-    return options, nil\r\n-}\r\n-\r\n-func GetPollDetail(pollID string) (*models.Poll, error) {\r\n     row := config.DB.QueryRow(`\r\n         SELECT id, title, description, expires_at, status, allow_realtime_results \r\n         FROM polls WHERE id = ?`, pollID)\r\n \r\n-    var p models.Poll\r\n     if err := row.Scan(&p.ID, &p.Title, &p.Description, &p.ExpiresAt, &p.Status, &p.AllowRealtimeResults); err != nil {\r\n         return nil, err\r\n     }\r\n \r\n"
                },
                {
                    "date": 1747240140570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n package services\r\n \r\n import (\r\n     \"backand/models\"\r\n+    \"backand/models\"\r\n )\r\n \r\n func FetchPollData(pollID string) (*models.Poll, error) {\r\n     var p models.Poll\r\n"
                },
                {
                    "date": 1747240157494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n package services\r\n \r\n import (\r\n     \"backand/models\"\r\n-    \"backand/models\"\r\n+    \"backand/config\"\r\n )\r\n \r\n func FetchPollData(pollID string) (*models.Poll, error) {\r\n     var p models.Poll\r\n"
                },
                {
                    "date": 1747286104605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,14 +5,17 @@\n     \"backand/config\"\r\n )\r\n \r\n func FetchPollData(pollID string) (*models.Poll, error) {\r\n-    var p models.Poll\r\n     row := config.DB.QueryRow(`\r\n         SELECT id, title, description, expires_at, status, allow_realtime_results \r\n         FROM polls WHERE id = ?`, pollID)\r\n \r\n+    var p models.Poll\r\n     if err := row.Scan(&p.ID, &p.Title, &p.Description, &p.ExpiresAt, &p.Status, &p.AllowRealtimeResults); err != nil {\r\n+        if err == sql.ErrNoRows {\r\n+            return nil, fmt.Errorf(\"poll not found\")\r\n+        }\r\n         return nil, err\r\n     }\r\n \r\n     return &p, nil\r\n"
                },
                {
                    "date": 1747286111921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n \r\n import (\r\n     \"backand/models\"\r\n     \"backand/config\"\r\n+    \"fmt\"\r\n )\r\n \r\n func FetchPollData(pollID string) (*models.Poll, error) {\r\n     row := config.DB.QueryRow(`\r\n"
                },
                {
                    "date": 1747286125918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import (\r\n     \"backand/models\"\r\n     \"backand/config\"\r\n     \"fmt\"\r\n+    \r\n )\r\n \r\n func FetchPollData(pollID string) (*models.Poll, error) {\r\n     row := config.DB.QueryRow(`\r\n"
                },
                {
                    "date": 1747286139495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,12 @@\n package services\r\n \r\n import (\r\n-    \"backand/models\"\r\n-    \"backand/config\"\r\n-    \"fmt\"\r\n-    \r\n+\t\"\"\r\n+\t\"backand/config\"\r\n+\t\"backand/models\"\r\n+\t\"database/sql\"\r\n+\t\"fmt\"\r\n )\r\n \r\n func FetchPollData(pollID string) (*models.Poll, error) {\r\n     row := config.DB.QueryRow(`\r\n"
                },
                {
                    "date": 1747286252670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,24 +1,18 @@\n package services\r\n \r\n import (\r\n-\t\"\"\r\n-\t\"backand/config\"\r\n-\t\"backand/models\"\r\n-\t\"database/sql\"\r\n-\t\"fmt\"\r\n+    \"backand/models\"\r\n+    \"backand/config\"\r\n )\r\n \r\n func FetchPollData(pollID string) (*models.Poll, error) {\r\n+    var p models.Poll\r\n     row := config.DB.QueryRow(`\r\n         SELECT id, title, description, expires_at, status, allow_realtime_results \r\n         FROM polls WHERE id = ?`, pollID)\r\n \r\n-    var p models.Poll\r\n     if err := row.Scan(&p.ID, &p.Title, &p.Description, &p.ExpiresAt, &p.Status, &p.AllowRealtimeResults); err != nil {\r\n-        if err == sql.ErrNoRows {\r\n-            return nil, fmt.Errorf(\"poll not found\")\r\n-        }\r\n         return nil, err\r\n     }\r\n \r\n     return &p, nil\r\n"
                },
                {
                    "date": 1747286512083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,14 +5,17 @@\n     \"backand/config\"\r\n )\r\n \r\n func FetchPollData(pollID string) (*models.Poll, error) {\r\n-    var p models.Poll\r\n     row := config.DB.QueryRow(`\r\n         SELECT id, title, description, expires_at, status, allow_realtime_results \r\n         FROM polls WHERE id = ?`, pollID)\r\n \r\n+    var p models.Poll\r\n     if err := row.Scan(&p.ID, &p.Title, &p.Description, &p.ExpiresAt, &p.Status, &p.AllowRealtimeResults); err != nil {\r\n+        if err == sql.ErrNoRows {\r\n+            return nil, fmt.Errorf(\"poll not found\")\r\n+        }\r\n         return nil, err\r\n     }\r\n \r\n     return &p, nil\r\n"
                }
            ],
            "date": 1747213543539,
            "name": "Commit-0",
            "content": "package services"
        }
    ]
}